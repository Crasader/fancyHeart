// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fight.proto

#ifndef PROTOBUF_fight_2eproto__INCLUDED
#define PROTOBUF_fight_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_fight_2eproto();
void protobuf_AssignDesc_fight_2eproto();
void protobuf_ShutdownFile_fight_2eproto();

class PHit;
class PAtc;

// ===================================================================

class PHit : public ::google::protobuf::Message {
 public:
  PHit();
  virtual ~PHit();

  PHit(const PHit& from);

  inline PHit& operator=(const PHit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PHit& default_instance();

  void Swap(PHit* other);

  // implements Message ----------------------------------------------

  PHit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PHit& from);
  void MergeFrom(const PHit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 xid = 1;
  inline bool has_xid() const;
  inline void clear_xid();
  static const int kXidFieldNumber = 1;
  inline ::google::protobuf::int32 xid() const;
  inline void set_xid(::google::protobuf::int32 value);

  // required bool isMiss = 2;
  inline bool has_ismiss() const;
  inline void clear_ismiss();
  static const int kIsMissFieldNumber = 2;
  inline bool ismiss() const;
  inline void set_ismiss(bool value);

  // required bool isCrh = 3;
  inline bool has_iscrh() const;
  inline void clear_iscrh();
  static const int kIsCrhFieldNumber = 3;
  inline bool iscrh() const;
  inline void set_iscrh(bool value);

  // required int32 hp = 4;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 4;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // required int32 addBuff = 5;
  inline bool has_addbuff() const;
  inline void clear_addbuff();
  static const int kAddBuffFieldNumber = 5;
  inline ::google::protobuf::int32 addbuff() const;
  inline void set_addbuff(::google::protobuf::int32 value);

  // required int32 delBuff = 6;
  inline bool has_delbuff() const;
  inline void clear_delbuff();
  static const int kDelBuffFieldNumber = 6;
  inline ::google::protobuf::int32 delbuff() const;
  inline void set_delbuff(::google::protobuf::int32 value);

  // required bool isDie = 7;
  inline bool has_isdie() const;
  inline void clear_isdie();
  static const int kIsDieFieldNumber = 7;
  inline bool isdie() const;
  inline void set_isdie(bool value);

  // @@protoc_insertion_point(class_scope:PHit)
 private:
  inline void set_has_xid();
  inline void clear_has_xid();
  inline void set_has_ismiss();
  inline void clear_has_ismiss();
  inline void set_has_iscrh();
  inline void clear_has_iscrh();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_addbuff();
  inline void clear_has_addbuff();
  inline void set_has_delbuff();
  inline void clear_has_delbuff();
  inline void set_has_isdie();
  inline void clear_has_isdie();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 xid_;
  ::google::protobuf::int32 hp_;
  bool ismiss_;
  bool iscrh_;
  bool isdie_;
  ::google::protobuf::int32 addbuff_;
  ::google::protobuf::int32 delbuff_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_fight_2eproto();
  friend void protobuf_AssignDesc_fight_2eproto();
  friend void protobuf_ShutdownFile_fight_2eproto();

  void InitAsDefaultInstance();
  static PHit* default_instance_;
};
// -------------------------------------------------------------------

class PAtc : public ::google::protobuf::Message {
 public:
  PAtc();
  virtual ~PAtc();

  PAtc(const PAtc& from);

  inline PAtc& operator=(const PAtc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PAtc& default_instance();

  void Swap(PAtc* other);

  // implements Message ----------------------------------------------

  PAtc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PAtc& from);
  void MergeFrom(const PAtc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 xid = 1;
  inline bool has_xid() const;
  inline void clear_xid();
  static const int kXidFieldNumber = 1;
  inline ::google::protobuf::int32 xid() const;
  inline void set_xid(::google::protobuf::int32 value);

  // required int32 skillID = 2;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 2;
  inline ::google::protobuf::int32 skillid() const;
  inline void set_skillid(::google::protobuf::int32 value);

  // required int32 hp = 3;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 3;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // required int32 mp = 4;
  inline bool has_mp() const;
  inline void clear_mp();
  static const int kMpFieldNumber = 4;
  inline ::google::protobuf::int32 mp() const;
  inline void set_mp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PAtc)
 private:
  inline void set_has_xid();
  inline void clear_has_xid();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_mp();
  inline void clear_has_mp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 xid_;
  ::google::protobuf::int32 skillid_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 mp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_fight_2eproto();
  friend void protobuf_AssignDesc_fight_2eproto();
  friend void protobuf_ShutdownFile_fight_2eproto();

  void InitAsDefaultInstance();
  static PAtc* default_instance_;
};
// ===================================================================


// ===================================================================

// PHit

// required int32 xid = 1;
inline bool PHit::has_xid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PHit::set_has_xid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PHit::clear_has_xid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PHit::clear_xid() {
  xid_ = 0;
  clear_has_xid();
}
inline ::google::protobuf::int32 PHit::xid() const {
  return xid_;
}
inline void PHit::set_xid(::google::protobuf::int32 value) {
  set_has_xid();
  xid_ = value;
}

// required bool isMiss = 2;
inline bool PHit::has_ismiss() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PHit::set_has_ismiss() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PHit::clear_has_ismiss() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PHit::clear_ismiss() {
  ismiss_ = false;
  clear_has_ismiss();
}
inline bool PHit::ismiss() const {
  return ismiss_;
}
inline void PHit::set_ismiss(bool value) {
  set_has_ismiss();
  ismiss_ = value;
}

// required bool isCrh = 3;
inline bool PHit::has_iscrh() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PHit::set_has_iscrh() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PHit::clear_has_iscrh() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PHit::clear_iscrh() {
  iscrh_ = false;
  clear_has_iscrh();
}
inline bool PHit::iscrh() const {
  return iscrh_;
}
inline void PHit::set_iscrh(bool value) {
  set_has_iscrh();
  iscrh_ = value;
}

// required int32 hp = 4;
inline bool PHit::has_hp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PHit::set_has_hp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PHit::clear_has_hp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PHit::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 PHit::hp() const {
  return hp_;
}
inline void PHit::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// required int32 addBuff = 5;
inline bool PHit::has_addbuff() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PHit::set_has_addbuff() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PHit::clear_has_addbuff() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PHit::clear_addbuff() {
  addbuff_ = 0;
  clear_has_addbuff();
}
inline ::google::protobuf::int32 PHit::addbuff() const {
  return addbuff_;
}
inline void PHit::set_addbuff(::google::protobuf::int32 value) {
  set_has_addbuff();
  addbuff_ = value;
}

// required int32 delBuff = 6;
inline bool PHit::has_delbuff() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PHit::set_has_delbuff() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PHit::clear_has_delbuff() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PHit::clear_delbuff() {
  delbuff_ = 0;
  clear_has_delbuff();
}
inline ::google::protobuf::int32 PHit::delbuff() const {
  return delbuff_;
}
inline void PHit::set_delbuff(::google::protobuf::int32 value) {
  set_has_delbuff();
  delbuff_ = value;
}

// required bool isDie = 7;
inline bool PHit::has_isdie() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PHit::set_has_isdie() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PHit::clear_has_isdie() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PHit::clear_isdie() {
  isdie_ = false;
  clear_has_isdie();
}
inline bool PHit::isdie() const {
  return isdie_;
}
inline void PHit::set_isdie(bool value) {
  set_has_isdie();
  isdie_ = value;
}

// -------------------------------------------------------------------

// PAtc

// required int32 xid = 1;
inline bool PAtc::has_xid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PAtc::set_has_xid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PAtc::clear_has_xid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PAtc::clear_xid() {
  xid_ = 0;
  clear_has_xid();
}
inline ::google::protobuf::int32 PAtc::xid() const {
  return xid_;
}
inline void PAtc::set_xid(::google::protobuf::int32 value) {
  set_has_xid();
  xid_ = value;
}

// required int32 skillID = 2;
inline bool PAtc::has_skillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PAtc::set_has_skillid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PAtc::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PAtc::clear_skillid() {
  skillid_ = 0;
  clear_has_skillid();
}
inline ::google::protobuf::int32 PAtc::skillid() const {
  return skillid_;
}
inline void PAtc::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
}

// required int32 hp = 3;
inline bool PAtc::has_hp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PAtc::set_has_hp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PAtc::clear_has_hp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PAtc::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 PAtc::hp() const {
  return hp_;
}
inline void PAtc::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// required int32 mp = 4;
inline bool PAtc::has_mp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PAtc::set_has_mp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PAtc::clear_has_mp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PAtc::clear_mp() {
  mp_ = 0;
  clear_has_mp();
}
inline ::google::protobuf::int32 PAtc::mp() const {
  return mp_;
}
inline void PAtc::set_mp(::google::protobuf::int32 value) {
  set_has_mp();
  mp_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fight_2eproto__INCLUDED
