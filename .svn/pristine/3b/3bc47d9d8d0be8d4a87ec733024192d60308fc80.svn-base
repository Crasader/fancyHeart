// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fight.proto

public final class Fight {
  private Fight() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface PHitOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 xid = 1;
    /**
     * <code>required int32 xid = 1;</code>
     *
     * <pre>
     *id
     * </pre>
     */
    boolean hasXid();
    /**
     * <code>required int32 xid = 1;</code>
     *
     * <pre>
     *id
     * </pre>
     */
    int getXid();

    // required bool isMiss = 2;
    /**
     * <code>required bool isMiss = 2;</code>
     *
     * <pre>
     *闪避
     * </pre>
     */
    boolean hasIsMiss();
    /**
     * <code>required bool isMiss = 2;</code>
     *
     * <pre>
     *闪避
     * </pre>
     */
    boolean getIsMiss();

    // required bool isCrh = 3;
    /**
     * <code>required bool isCrh = 3;</code>
     *
     * <pre>
     *暴击
     * </pre>
     */
    boolean hasIsCrh();
    /**
     * <code>required bool isCrh = 3;</code>
     *
     * <pre>
     *暴击
     * </pre>
     */
    boolean getIsCrh();

    // required int32 hp = 4;
    /**
     * <code>required int32 hp = 4;</code>
     *
     * <pre>
     *掉血
     * </pre>
     */
    boolean hasHp();
    /**
     * <code>required int32 hp = 4;</code>
     *
     * <pre>
     *掉血
     * </pre>
     */
    int getHp();

    // required int32 addBuff = 5;
    /**
     * <code>required int32 addBuff = 5;</code>
     *
     * <pre>
     *增加的buff
     * </pre>
     */
    boolean hasAddBuff();
    /**
     * <code>required int32 addBuff = 5;</code>
     *
     * <pre>
     *增加的buff
     * </pre>
     */
    int getAddBuff();

    // required int32 delBuff = 6;
    /**
     * <code>required int32 delBuff = 6;</code>
     *
     * <pre>
     *去掉的buff
     * </pre>
     */
    boolean hasDelBuff();
    /**
     * <code>required int32 delBuff = 6;</code>
     *
     * <pre>
     *去掉的buff
     * </pre>
     */
    int getDelBuff();

    // required bool isDie = 7;
    /**
     * <code>required bool isDie = 7;</code>
     *
     * <pre>
     *是否死亡
     * </pre>
     */
    boolean hasIsDie();
    /**
     * <code>required bool isDie = 7;</code>
     *
     * <pre>
     *是否死亡
     * </pre>
     */
    boolean getIsDie();

    // required int32 skill = 8;
    /**
     * <code>required int32 skill = 8;</code>
     *
     * <pre>
     *技能id
     * </pre>
     */
    boolean hasSkill();
    /**
     * <code>required int32 skill = 8;</code>
     *
     * <pre>
     *技能id
     * </pre>
     */
    int getSkill();

    // required int32 axid = 9;
    /**
     * <code>required int32 axid = 9;</code>
     *
     * <pre>
     *攻击者id
     * </pre>
     */
    boolean hasAxid();
    /**
     * <code>required int32 axid = 9;</code>
     *
     * <pre>
     *攻击者id
     * </pre>
     */
    int getAxid();

    // required int32 ahp = 10;
    /**
     * <code>required int32 ahp = 10;</code>
     *
     * <pre>
     *攻击者血量变化
     * </pre>
     */
    boolean hasAhp();
    /**
     * <code>required int32 ahp = 10;</code>
     *
     * <pre>
     *攻击者血量变化
     * </pre>
     */
    int getAhp();

    // required int32 pos = 11;
    /**
     * <code>required int32 pos = 11;</code>
     *
     * <pre>
     *位置
     * </pre>
     */
    boolean hasPos();
    /**
     * <code>required int32 pos = 11;</code>
     *
     * <pre>
     *位置
     * </pre>
     */
    int getPos();

    // required int32 apos = 12;
    /**
     * <code>required int32 apos = 12;</code>
     *
     * <pre>
     *攻击者位置
     * </pre>
     */
    boolean hasApos();
    /**
     * <code>required int32 apos = 12;</code>
     *
     * <pre>
     *攻击者位置
     * </pre>
     */
    int getApos();

    // required float perHp = 13;
    /**
     * <code>required float perHp = 13;</code>
     *
     * <pre>
     *血量百分比
     * </pre>
     */
    boolean hasPerHp();
    /**
     * <code>required float perHp = 13;</code>
     *
     * <pre>
     *血量百分比
     * </pre>
     */
    float getPerHp();

    // required bool isDefence = 14;
    /**
     * <code>required bool isDefence = 14;</code>
     *
     * <pre>
     *防御
     * </pre>
     */
    boolean hasIsDefence();
    /**
     * <code>required bool isDefence = 14;</code>
     *
     * <pre>
     *防御
     * </pre>
     */
    boolean getIsDefence();

    // required bool isHitOnAir = 15;
    /**
     * <code>required bool isHitOnAir = 15;</code>
     *
     * <pre>
     *浮空
     * </pre>
     */
    boolean hasIsHitOnAir();
    /**
     * <code>required bool isHitOnAir = 15;</code>
     *
     * <pre>
     *浮空
     * </pre>
     */
    boolean getIsHitOnAir();

    // required bool isImmune = 16;
    /**
     * <code>required bool isImmune = 16;</code>
     *
     * <pre>
     *免疫
     * </pre>
     */
    boolean hasIsImmune();
    /**
     * <code>required bool isImmune = 16;</code>
     *
     * <pre>
     *免疫
     * </pre>
     */
    boolean getIsImmune();

    // required bool isIgnore = 17;
    /**
     * <code>required bool isIgnore = 17;</code>
     *
     * <pre>
     *忽略
     * </pre>
     */
    boolean hasIsIgnore();
    /**
     * <code>required bool isIgnore = 17;</code>
     *
     * <pre>
     *忽略
     * </pre>
     */
    boolean getIsIgnore();
  }
  /**
   * Protobuf type {@code PHit}
   */
  public static final class PHit extends
      com.google.protobuf.GeneratedMessage
      implements PHitOrBuilder {
    // Use PHit.newBuilder() to construct.
    private PHit(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PHit(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PHit defaultInstance;
    public static PHit getDefaultInstance() {
      return defaultInstance;
    }

    public PHit getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PHit(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              xid_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              isMiss_ = input.readBool();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              isCrh_ = input.readBool();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              hp_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              addBuff_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              delBuff_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              isDie_ = input.readBool();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              skill_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              axid_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              ahp_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              pos_ = input.readInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              apos_ = input.readInt32();
              break;
            }
            case 109: {
              bitField0_ |= 0x00001000;
              perHp_ = input.readFloat();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              isDefence_ = input.readBool();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              isHitOnAir_ = input.readBool();
              break;
            }
            case 128: {
              bitField0_ |= 0x00008000;
              isImmune_ = input.readBool();
              break;
            }
            case 136: {
              bitField0_ |= 0x00010000;
              isIgnore_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Fight.internal_static_PHit_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Fight.internal_static_PHit_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Fight.PHit.class, Fight.PHit.Builder.class);
    }

    public static com.google.protobuf.Parser<PHit> PARSER =
        new com.google.protobuf.AbstractParser<PHit>() {
      public PHit parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PHit(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PHit> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 xid = 1;
    public static final int XID_FIELD_NUMBER = 1;
    private int xid_;
    /**
     * <code>required int32 xid = 1;</code>
     *
     * <pre>
     *id
     * </pre>
     */
    public boolean hasXid() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 xid = 1;</code>
     *
     * <pre>
     *id
     * </pre>
     */
    public int getXid() {
      return xid_;
    }

    // required bool isMiss = 2;
    public static final int ISMISS_FIELD_NUMBER = 2;
    private boolean isMiss_;
    /**
     * <code>required bool isMiss = 2;</code>
     *
     * <pre>
     *闪避
     * </pre>
     */
    public boolean hasIsMiss() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required bool isMiss = 2;</code>
     *
     * <pre>
     *闪避
     * </pre>
     */
    public boolean getIsMiss() {
      return isMiss_;
    }

    // required bool isCrh = 3;
    public static final int ISCRH_FIELD_NUMBER = 3;
    private boolean isCrh_;
    /**
     * <code>required bool isCrh = 3;</code>
     *
     * <pre>
     *暴击
     * </pre>
     */
    public boolean hasIsCrh() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required bool isCrh = 3;</code>
     *
     * <pre>
     *暴击
     * </pre>
     */
    public boolean getIsCrh() {
      return isCrh_;
    }

    // required int32 hp = 4;
    public static final int HP_FIELD_NUMBER = 4;
    private int hp_;
    /**
     * <code>required int32 hp = 4;</code>
     *
     * <pre>
     *掉血
     * </pre>
     */
    public boolean hasHp() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int32 hp = 4;</code>
     *
     * <pre>
     *掉血
     * </pre>
     */
    public int getHp() {
      return hp_;
    }

    // required int32 addBuff = 5;
    public static final int ADDBUFF_FIELD_NUMBER = 5;
    private int addBuff_;
    /**
     * <code>required int32 addBuff = 5;</code>
     *
     * <pre>
     *增加的buff
     * </pre>
     */
    public boolean hasAddBuff() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required int32 addBuff = 5;</code>
     *
     * <pre>
     *增加的buff
     * </pre>
     */
    public int getAddBuff() {
      return addBuff_;
    }

    // required int32 delBuff = 6;
    public static final int DELBUFF_FIELD_NUMBER = 6;
    private int delBuff_;
    /**
     * <code>required int32 delBuff = 6;</code>
     *
     * <pre>
     *去掉的buff
     * </pre>
     */
    public boolean hasDelBuff() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required int32 delBuff = 6;</code>
     *
     * <pre>
     *去掉的buff
     * </pre>
     */
    public int getDelBuff() {
      return delBuff_;
    }

    // required bool isDie = 7;
    public static final int ISDIE_FIELD_NUMBER = 7;
    private boolean isDie_;
    /**
     * <code>required bool isDie = 7;</code>
     *
     * <pre>
     *是否死亡
     * </pre>
     */
    public boolean hasIsDie() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required bool isDie = 7;</code>
     *
     * <pre>
     *是否死亡
     * </pre>
     */
    public boolean getIsDie() {
      return isDie_;
    }

    // required int32 skill = 8;
    public static final int SKILL_FIELD_NUMBER = 8;
    private int skill_;
    /**
     * <code>required int32 skill = 8;</code>
     *
     * <pre>
     *技能id
     * </pre>
     */
    public boolean hasSkill() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required int32 skill = 8;</code>
     *
     * <pre>
     *技能id
     * </pre>
     */
    public int getSkill() {
      return skill_;
    }

    // required int32 axid = 9;
    public static final int AXID_FIELD_NUMBER = 9;
    private int axid_;
    /**
     * <code>required int32 axid = 9;</code>
     *
     * <pre>
     *攻击者id
     * </pre>
     */
    public boolean hasAxid() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required int32 axid = 9;</code>
     *
     * <pre>
     *攻击者id
     * </pre>
     */
    public int getAxid() {
      return axid_;
    }

    // required int32 ahp = 10;
    public static final int AHP_FIELD_NUMBER = 10;
    private int ahp_;
    /**
     * <code>required int32 ahp = 10;</code>
     *
     * <pre>
     *攻击者血量变化
     * </pre>
     */
    public boolean hasAhp() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>required int32 ahp = 10;</code>
     *
     * <pre>
     *攻击者血量变化
     * </pre>
     */
    public int getAhp() {
      return ahp_;
    }

    // required int32 pos = 11;
    public static final int POS_FIELD_NUMBER = 11;
    private int pos_;
    /**
     * <code>required int32 pos = 11;</code>
     *
     * <pre>
     *位置
     * </pre>
     */
    public boolean hasPos() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>required int32 pos = 11;</code>
     *
     * <pre>
     *位置
     * </pre>
     */
    public int getPos() {
      return pos_;
    }

    // required int32 apos = 12;
    public static final int APOS_FIELD_NUMBER = 12;
    private int apos_;
    /**
     * <code>required int32 apos = 12;</code>
     *
     * <pre>
     *攻击者位置
     * </pre>
     */
    public boolean hasApos() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>required int32 apos = 12;</code>
     *
     * <pre>
     *攻击者位置
     * </pre>
     */
    public int getApos() {
      return apos_;
    }

    // required float perHp = 13;
    public static final int PERHP_FIELD_NUMBER = 13;
    private float perHp_;
    /**
     * <code>required float perHp = 13;</code>
     *
     * <pre>
     *血量百分比
     * </pre>
     */
    public boolean hasPerHp() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>required float perHp = 13;</code>
     *
     * <pre>
     *血量百分比
     * </pre>
     */
    public float getPerHp() {
      return perHp_;
    }

    // required bool isDefence = 14;
    public static final int ISDEFENCE_FIELD_NUMBER = 14;
    private boolean isDefence_;
    /**
     * <code>required bool isDefence = 14;</code>
     *
     * <pre>
     *防御
     * </pre>
     */
    public boolean hasIsDefence() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>required bool isDefence = 14;</code>
     *
     * <pre>
     *防御
     * </pre>
     */
    public boolean getIsDefence() {
      return isDefence_;
    }

    // required bool isHitOnAir = 15;
    public static final int ISHITONAIR_FIELD_NUMBER = 15;
    private boolean isHitOnAir_;
    /**
     * <code>required bool isHitOnAir = 15;</code>
     *
     * <pre>
     *浮空
     * </pre>
     */
    public boolean hasIsHitOnAir() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>required bool isHitOnAir = 15;</code>
     *
     * <pre>
     *浮空
     * </pre>
     */
    public boolean getIsHitOnAir() {
      return isHitOnAir_;
    }

    // required bool isImmune = 16;
    public static final int ISIMMUNE_FIELD_NUMBER = 16;
    private boolean isImmune_;
    /**
     * <code>required bool isImmune = 16;</code>
     *
     * <pre>
     *免疫
     * </pre>
     */
    public boolean hasIsImmune() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>required bool isImmune = 16;</code>
     *
     * <pre>
     *免疫
     * </pre>
     */
    public boolean getIsImmune() {
      return isImmune_;
    }

    // required bool isIgnore = 17;
    public static final int ISIGNORE_FIELD_NUMBER = 17;
    private boolean isIgnore_;
    /**
     * <code>required bool isIgnore = 17;</code>
     *
     * <pre>
     *忽略
     * </pre>
     */
    public boolean hasIsIgnore() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>required bool isIgnore = 17;</code>
     *
     * <pre>
     *忽略
     * </pre>
     */
    public boolean getIsIgnore() {
      return isIgnore_;
    }

    private void initFields() {
      xid_ = 0;
      isMiss_ = false;
      isCrh_ = false;
      hp_ = 0;
      addBuff_ = 0;
      delBuff_ = 0;
      isDie_ = false;
      skill_ = 0;
      axid_ = 0;
      ahp_ = 0;
      pos_ = 0;
      apos_ = 0;
      perHp_ = 0F;
      isDefence_ = false;
      isHitOnAir_ = false;
      isImmune_ = false;
      isIgnore_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasXid()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsMiss()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsCrh()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHp()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAddBuff()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDelBuff()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsDie()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSkill()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAxid()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAhp()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPos()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasApos()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPerHp()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsDefence()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsHitOnAir()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsImmune()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsIgnore()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, xid_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, isMiss_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, isCrh_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, hp_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, addBuff_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, delBuff_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(7, isDie_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(8, skill_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(9, axid_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(10, ahp_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(11, pos_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(12, apos_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeFloat(13, perHp_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeBool(14, isDefence_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeBool(15, isHitOnAir_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeBool(16, isImmune_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeBool(17, isIgnore_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, xid_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, isMiss_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, isCrh_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, hp_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, addBuff_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, delBuff_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, isDie_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, skill_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, axid_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, ahp_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, pos_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, apos_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(13, perHp_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(14, isDefence_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(15, isHitOnAir_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(16, isImmune_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(17, isIgnore_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static Fight.PHit parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Fight.PHit parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Fight.PHit parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Fight.PHit parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Fight.PHit parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static Fight.PHit parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static Fight.PHit parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static Fight.PHit parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static Fight.PHit parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static Fight.PHit parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(Fight.PHit prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code PHit}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements Fight.PHitOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Fight.internal_static_PHit_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Fight.internal_static_PHit_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Fight.PHit.class, Fight.PHit.Builder.class);
      }

      // Construct using Fight.PHit.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        xid_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        isMiss_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        isCrh_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        hp_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        addBuff_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        delBuff_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        isDie_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        skill_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        axid_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        ahp_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        pos_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        apos_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        perHp_ = 0F;
        bitField0_ = (bitField0_ & ~0x00001000);
        isDefence_ = false;
        bitField0_ = (bitField0_ & ~0x00002000);
        isHitOnAir_ = false;
        bitField0_ = (bitField0_ & ~0x00004000);
        isImmune_ = false;
        bitField0_ = (bitField0_ & ~0x00008000);
        isIgnore_ = false;
        bitField0_ = (bitField0_ & ~0x00010000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Fight.internal_static_PHit_descriptor;
      }

      public Fight.PHit getDefaultInstanceForType() {
        return Fight.PHit.getDefaultInstance();
      }

      public Fight.PHit build() {
        Fight.PHit result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public Fight.PHit buildPartial() {
        Fight.PHit result = new Fight.PHit(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.xid_ = xid_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.isMiss_ = isMiss_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.isCrh_ = isCrh_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.hp_ = hp_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.addBuff_ = addBuff_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.delBuff_ = delBuff_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.isDie_ = isDie_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.skill_ = skill_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.axid_ = axid_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.ahp_ = ahp_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.pos_ = pos_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.apos_ = apos_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.perHp_ = perHp_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.isDefence_ = isDefence_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.isHitOnAir_ = isHitOnAir_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.isImmune_ = isImmune_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.isIgnore_ = isIgnore_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Fight.PHit) {
          return mergeFrom((Fight.PHit)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Fight.PHit other) {
        if (other == Fight.PHit.getDefaultInstance()) return this;
        if (other.hasXid()) {
          setXid(other.getXid());
        }
        if (other.hasIsMiss()) {
          setIsMiss(other.getIsMiss());
        }
        if (other.hasIsCrh()) {
          setIsCrh(other.getIsCrh());
        }
        if (other.hasHp()) {
          setHp(other.getHp());
        }
        if (other.hasAddBuff()) {
          setAddBuff(other.getAddBuff());
        }
        if (other.hasDelBuff()) {
          setDelBuff(other.getDelBuff());
        }
        if (other.hasIsDie()) {
          setIsDie(other.getIsDie());
        }
        if (other.hasSkill()) {
          setSkill(other.getSkill());
        }
        if (other.hasAxid()) {
          setAxid(other.getAxid());
        }
        if (other.hasAhp()) {
          setAhp(other.getAhp());
        }
        if (other.hasPos()) {
          setPos(other.getPos());
        }
        if (other.hasApos()) {
          setApos(other.getApos());
        }
        if (other.hasPerHp()) {
          setPerHp(other.getPerHp());
        }
        if (other.hasIsDefence()) {
          setIsDefence(other.getIsDefence());
        }
        if (other.hasIsHitOnAir()) {
          setIsHitOnAir(other.getIsHitOnAir());
        }
        if (other.hasIsImmune()) {
          setIsImmune(other.getIsImmune());
        }
        if (other.hasIsIgnore()) {
          setIsIgnore(other.getIsIgnore());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasXid()) {
          
          return false;
        }
        if (!hasIsMiss()) {
          
          return false;
        }
        if (!hasIsCrh()) {
          
          return false;
        }
        if (!hasHp()) {
          
          return false;
        }
        if (!hasAddBuff()) {
          
          return false;
        }
        if (!hasDelBuff()) {
          
          return false;
        }
        if (!hasIsDie()) {
          
          return false;
        }
        if (!hasSkill()) {
          
          return false;
        }
        if (!hasAxid()) {
          
          return false;
        }
        if (!hasAhp()) {
          
          return false;
        }
        if (!hasPos()) {
          
          return false;
        }
        if (!hasApos()) {
          
          return false;
        }
        if (!hasPerHp()) {
          
          return false;
        }
        if (!hasIsDefence()) {
          
          return false;
        }
        if (!hasIsHitOnAir()) {
          
          return false;
        }
        if (!hasIsImmune()) {
          
          return false;
        }
        if (!hasIsIgnore()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Fight.PHit parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Fight.PHit) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 xid = 1;
      private int xid_ ;
      /**
       * <code>required int32 xid = 1;</code>
       *
       * <pre>
       *id
       * </pre>
       */
      public boolean hasXid() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 xid = 1;</code>
       *
       * <pre>
       *id
       * </pre>
       */
      public int getXid() {
        return xid_;
      }
      /**
       * <code>required int32 xid = 1;</code>
       *
       * <pre>
       *id
       * </pre>
       */
      public Builder setXid(int value) {
        bitField0_ |= 0x00000001;
        xid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 xid = 1;</code>
       *
       * <pre>
       *id
       * </pre>
       */
      public Builder clearXid() {
        bitField0_ = (bitField0_ & ~0x00000001);
        xid_ = 0;
        onChanged();
        return this;
      }

      // required bool isMiss = 2;
      private boolean isMiss_ ;
      /**
       * <code>required bool isMiss = 2;</code>
       *
       * <pre>
       *闪避
       * </pre>
       */
      public boolean hasIsMiss() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required bool isMiss = 2;</code>
       *
       * <pre>
       *闪避
       * </pre>
       */
      public boolean getIsMiss() {
        return isMiss_;
      }
      /**
       * <code>required bool isMiss = 2;</code>
       *
       * <pre>
       *闪避
       * </pre>
       */
      public Builder setIsMiss(boolean value) {
        bitField0_ |= 0x00000002;
        isMiss_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool isMiss = 2;</code>
       *
       * <pre>
       *闪避
       * </pre>
       */
      public Builder clearIsMiss() {
        bitField0_ = (bitField0_ & ~0x00000002);
        isMiss_ = false;
        onChanged();
        return this;
      }

      // required bool isCrh = 3;
      private boolean isCrh_ ;
      /**
       * <code>required bool isCrh = 3;</code>
       *
       * <pre>
       *暴击
       * </pre>
       */
      public boolean hasIsCrh() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required bool isCrh = 3;</code>
       *
       * <pre>
       *暴击
       * </pre>
       */
      public boolean getIsCrh() {
        return isCrh_;
      }
      /**
       * <code>required bool isCrh = 3;</code>
       *
       * <pre>
       *暴击
       * </pre>
       */
      public Builder setIsCrh(boolean value) {
        bitField0_ |= 0x00000004;
        isCrh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool isCrh = 3;</code>
       *
       * <pre>
       *暴击
       * </pre>
       */
      public Builder clearIsCrh() {
        bitField0_ = (bitField0_ & ~0x00000004);
        isCrh_ = false;
        onChanged();
        return this;
      }

      // required int32 hp = 4;
      private int hp_ ;
      /**
       * <code>required int32 hp = 4;</code>
       *
       * <pre>
       *掉血
       * </pre>
       */
      public boolean hasHp() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int32 hp = 4;</code>
       *
       * <pre>
       *掉血
       * </pre>
       */
      public int getHp() {
        return hp_;
      }
      /**
       * <code>required int32 hp = 4;</code>
       *
       * <pre>
       *掉血
       * </pre>
       */
      public Builder setHp(int value) {
        bitField0_ |= 0x00000008;
        hp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 hp = 4;</code>
       *
       * <pre>
       *掉血
       * </pre>
       */
      public Builder clearHp() {
        bitField0_ = (bitField0_ & ~0x00000008);
        hp_ = 0;
        onChanged();
        return this;
      }

      // required int32 addBuff = 5;
      private int addBuff_ ;
      /**
       * <code>required int32 addBuff = 5;</code>
       *
       * <pre>
       *增加的buff
       * </pre>
       */
      public boolean hasAddBuff() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required int32 addBuff = 5;</code>
       *
       * <pre>
       *增加的buff
       * </pre>
       */
      public int getAddBuff() {
        return addBuff_;
      }
      /**
       * <code>required int32 addBuff = 5;</code>
       *
       * <pre>
       *增加的buff
       * </pre>
       */
      public Builder setAddBuff(int value) {
        bitField0_ |= 0x00000010;
        addBuff_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 addBuff = 5;</code>
       *
       * <pre>
       *增加的buff
       * </pre>
       */
      public Builder clearAddBuff() {
        bitField0_ = (bitField0_ & ~0x00000010);
        addBuff_ = 0;
        onChanged();
        return this;
      }

      // required int32 delBuff = 6;
      private int delBuff_ ;
      /**
       * <code>required int32 delBuff = 6;</code>
       *
       * <pre>
       *去掉的buff
       * </pre>
       */
      public boolean hasDelBuff() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required int32 delBuff = 6;</code>
       *
       * <pre>
       *去掉的buff
       * </pre>
       */
      public int getDelBuff() {
        return delBuff_;
      }
      /**
       * <code>required int32 delBuff = 6;</code>
       *
       * <pre>
       *去掉的buff
       * </pre>
       */
      public Builder setDelBuff(int value) {
        bitField0_ |= 0x00000020;
        delBuff_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 delBuff = 6;</code>
       *
       * <pre>
       *去掉的buff
       * </pre>
       */
      public Builder clearDelBuff() {
        bitField0_ = (bitField0_ & ~0x00000020);
        delBuff_ = 0;
        onChanged();
        return this;
      }

      // required bool isDie = 7;
      private boolean isDie_ ;
      /**
       * <code>required bool isDie = 7;</code>
       *
       * <pre>
       *是否死亡
       * </pre>
       */
      public boolean hasIsDie() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required bool isDie = 7;</code>
       *
       * <pre>
       *是否死亡
       * </pre>
       */
      public boolean getIsDie() {
        return isDie_;
      }
      /**
       * <code>required bool isDie = 7;</code>
       *
       * <pre>
       *是否死亡
       * </pre>
       */
      public Builder setIsDie(boolean value) {
        bitField0_ |= 0x00000040;
        isDie_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool isDie = 7;</code>
       *
       * <pre>
       *是否死亡
       * </pre>
       */
      public Builder clearIsDie() {
        bitField0_ = (bitField0_ & ~0x00000040);
        isDie_ = false;
        onChanged();
        return this;
      }

      // required int32 skill = 8;
      private int skill_ ;
      /**
       * <code>required int32 skill = 8;</code>
       *
       * <pre>
       *技能id
       * </pre>
       */
      public boolean hasSkill() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required int32 skill = 8;</code>
       *
       * <pre>
       *技能id
       * </pre>
       */
      public int getSkill() {
        return skill_;
      }
      /**
       * <code>required int32 skill = 8;</code>
       *
       * <pre>
       *技能id
       * </pre>
       */
      public Builder setSkill(int value) {
        bitField0_ |= 0x00000080;
        skill_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 skill = 8;</code>
       *
       * <pre>
       *技能id
       * </pre>
       */
      public Builder clearSkill() {
        bitField0_ = (bitField0_ & ~0x00000080);
        skill_ = 0;
        onChanged();
        return this;
      }

      // required int32 axid = 9;
      private int axid_ ;
      /**
       * <code>required int32 axid = 9;</code>
       *
       * <pre>
       *攻击者id
       * </pre>
       */
      public boolean hasAxid() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required int32 axid = 9;</code>
       *
       * <pre>
       *攻击者id
       * </pre>
       */
      public int getAxid() {
        return axid_;
      }
      /**
       * <code>required int32 axid = 9;</code>
       *
       * <pre>
       *攻击者id
       * </pre>
       */
      public Builder setAxid(int value) {
        bitField0_ |= 0x00000100;
        axid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 axid = 9;</code>
       *
       * <pre>
       *攻击者id
       * </pre>
       */
      public Builder clearAxid() {
        bitField0_ = (bitField0_ & ~0x00000100);
        axid_ = 0;
        onChanged();
        return this;
      }

      // required int32 ahp = 10;
      private int ahp_ ;
      /**
       * <code>required int32 ahp = 10;</code>
       *
       * <pre>
       *攻击者血量变化
       * </pre>
       */
      public boolean hasAhp() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>required int32 ahp = 10;</code>
       *
       * <pre>
       *攻击者血量变化
       * </pre>
       */
      public int getAhp() {
        return ahp_;
      }
      /**
       * <code>required int32 ahp = 10;</code>
       *
       * <pre>
       *攻击者血量变化
       * </pre>
       */
      public Builder setAhp(int value) {
        bitField0_ |= 0x00000200;
        ahp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 ahp = 10;</code>
       *
       * <pre>
       *攻击者血量变化
       * </pre>
       */
      public Builder clearAhp() {
        bitField0_ = (bitField0_ & ~0x00000200);
        ahp_ = 0;
        onChanged();
        return this;
      }

      // required int32 pos = 11;
      private int pos_ ;
      /**
       * <code>required int32 pos = 11;</code>
       *
       * <pre>
       *位置
       * </pre>
       */
      public boolean hasPos() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>required int32 pos = 11;</code>
       *
       * <pre>
       *位置
       * </pre>
       */
      public int getPos() {
        return pos_;
      }
      /**
       * <code>required int32 pos = 11;</code>
       *
       * <pre>
       *位置
       * </pre>
       */
      public Builder setPos(int value) {
        bitField0_ |= 0x00000400;
        pos_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 pos = 11;</code>
       *
       * <pre>
       *位置
       * </pre>
       */
      public Builder clearPos() {
        bitField0_ = (bitField0_ & ~0x00000400);
        pos_ = 0;
        onChanged();
        return this;
      }

      // required int32 apos = 12;
      private int apos_ ;
      /**
       * <code>required int32 apos = 12;</code>
       *
       * <pre>
       *攻击者位置
       * </pre>
       */
      public boolean hasApos() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>required int32 apos = 12;</code>
       *
       * <pre>
       *攻击者位置
       * </pre>
       */
      public int getApos() {
        return apos_;
      }
      /**
       * <code>required int32 apos = 12;</code>
       *
       * <pre>
       *攻击者位置
       * </pre>
       */
      public Builder setApos(int value) {
        bitField0_ |= 0x00000800;
        apos_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 apos = 12;</code>
       *
       * <pre>
       *攻击者位置
       * </pre>
       */
      public Builder clearApos() {
        bitField0_ = (bitField0_ & ~0x00000800);
        apos_ = 0;
        onChanged();
        return this;
      }

      // required float perHp = 13;
      private float perHp_ ;
      /**
       * <code>required float perHp = 13;</code>
       *
       * <pre>
       *血量百分比
       * </pre>
       */
      public boolean hasPerHp() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>required float perHp = 13;</code>
       *
       * <pre>
       *血量百分比
       * </pre>
       */
      public float getPerHp() {
        return perHp_;
      }
      /**
       * <code>required float perHp = 13;</code>
       *
       * <pre>
       *血量百分比
       * </pre>
       */
      public Builder setPerHp(float value) {
        bitField0_ |= 0x00001000;
        perHp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float perHp = 13;</code>
       *
       * <pre>
       *血量百分比
       * </pre>
       */
      public Builder clearPerHp() {
        bitField0_ = (bitField0_ & ~0x00001000);
        perHp_ = 0F;
        onChanged();
        return this;
      }

      // required bool isDefence = 14;
      private boolean isDefence_ ;
      /**
       * <code>required bool isDefence = 14;</code>
       *
       * <pre>
       *防御
       * </pre>
       */
      public boolean hasIsDefence() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>required bool isDefence = 14;</code>
       *
       * <pre>
       *防御
       * </pre>
       */
      public boolean getIsDefence() {
        return isDefence_;
      }
      /**
       * <code>required bool isDefence = 14;</code>
       *
       * <pre>
       *防御
       * </pre>
       */
      public Builder setIsDefence(boolean value) {
        bitField0_ |= 0x00002000;
        isDefence_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool isDefence = 14;</code>
       *
       * <pre>
       *防御
       * </pre>
       */
      public Builder clearIsDefence() {
        bitField0_ = (bitField0_ & ~0x00002000);
        isDefence_ = false;
        onChanged();
        return this;
      }

      // required bool isHitOnAir = 15;
      private boolean isHitOnAir_ ;
      /**
       * <code>required bool isHitOnAir = 15;</code>
       *
       * <pre>
       *浮空
       * </pre>
       */
      public boolean hasIsHitOnAir() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>required bool isHitOnAir = 15;</code>
       *
       * <pre>
       *浮空
       * </pre>
       */
      public boolean getIsHitOnAir() {
        return isHitOnAir_;
      }
      /**
       * <code>required bool isHitOnAir = 15;</code>
       *
       * <pre>
       *浮空
       * </pre>
       */
      public Builder setIsHitOnAir(boolean value) {
        bitField0_ |= 0x00004000;
        isHitOnAir_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool isHitOnAir = 15;</code>
       *
       * <pre>
       *浮空
       * </pre>
       */
      public Builder clearIsHitOnAir() {
        bitField0_ = (bitField0_ & ~0x00004000);
        isHitOnAir_ = false;
        onChanged();
        return this;
      }

      // required bool isImmune = 16;
      private boolean isImmune_ ;
      /**
       * <code>required bool isImmune = 16;</code>
       *
       * <pre>
       *免疫
       * </pre>
       */
      public boolean hasIsImmune() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>required bool isImmune = 16;</code>
       *
       * <pre>
       *免疫
       * </pre>
       */
      public boolean getIsImmune() {
        return isImmune_;
      }
      /**
       * <code>required bool isImmune = 16;</code>
       *
       * <pre>
       *免疫
       * </pre>
       */
      public Builder setIsImmune(boolean value) {
        bitField0_ |= 0x00008000;
        isImmune_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool isImmune = 16;</code>
       *
       * <pre>
       *免疫
       * </pre>
       */
      public Builder clearIsImmune() {
        bitField0_ = (bitField0_ & ~0x00008000);
        isImmune_ = false;
        onChanged();
        return this;
      }

      // required bool isIgnore = 17;
      private boolean isIgnore_ ;
      /**
       * <code>required bool isIgnore = 17;</code>
       *
       * <pre>
       *忽略
       * </pre>
       */
      public boolean hasIsIgnore() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>required bool isIgnore = 17;</code>
       *
       * <pre>
       *忽略
       * </pre>
       */
      public boolean getIsIgnore() {
        return isIgnore_;
      }
      /**
       * <code>required bool isIgnore = 17;</code>
       *
       * <pre>
       *忽略
       * </pre>
       */
      public Builder setIsIgnore(boolean value) {
        bitField0_ |= 0x00010000;
        isIgnore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool isIgnore = 17;</code>
       *
       * <pre>
       *忽略
       * </pre>
       */
      public Builder clearIsIgnore() {
        bitField0_ = (bitField0_ & ~0x00010000);
        isIgnore_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:PHit)
    }

    static {
      defaultInstance = new PHit(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PHit)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_PHit_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_PHit_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\013fight.proto\"\216\002\n\004PHit\022\013\n\003xid\030\001 \002(\005\022\016\n\006i" +
      "sMiss\030\002 \002(\010\022\r\n\005isCrh\030\003 \002(\010\022\n\n\002hp\030\004 \002(\005\022\017" +
      "\n\007addBuff\030\005 \002(\005\022\017\n\007delBuff\030\006 \002(\005\022\r\n\005isDi" +
      "e\030\007 \002(\010\022\r\n\005skill\030\010 \002(\005\022\014\n\004axid\030\t \002(\005\022\013\n\003" +
      "ahp\030\n \002(\005\022\013\n\003pos\030\013 \002(\005\022\014\n\004apos\030\014 \002(\005\022\r\n\005" +
      "perHp\030\r \002(\002\022\021\n\tisDefence\030\016 \002(\010\022\022\n\nisHitO" +
      "nAir\030\017 \002(\010\022\020\n\010isImmune\030\020 \002(\010\022\020\n\010isIgnore" +
      "\030\021 \002(\010"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_PHit_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_PHit_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_PHit_descriptor,
              new java.lang.String[] { "Xid", "IsMiss", "IsCrh", "Hp", "AddBuff", "DelBuff", "IsDie", "Skill", "Axid", "Ahp", "Pos", "Apos", "PerHp", "IsDefence", "IsHitOnAir", "IsImmune", "IsIgnore", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
