//
//  VFighter.cpp
//  fancyHeart
//
//  Created by 秦亮亮 on 14-5-6.
//
//

#include "VFighter.h"
#include "BattleScene.h"


VFighter* VFighter::create(std::string fPath,std::string rPath,int pos)
{
    VFighter* pRet = new VFighter();
    if (pRet && pRet->init(fPath,rPath,pos))
    {
        pRet->autorelease();
        return pRet;
    }else{
        delete pRet;
        pRet = NULL;
        return NULL;
    }
}

bool VFighter::init(std::string fPath,std::string rPath,int pos)
{
    this->pos=pos;
	//init ui
    float scale=fPath=="huLi.json"?0.25:0.5;
    this->skeletonNode = SkeletonAnimation::createWithFile(fPath, rPath, BattleMgr::getInstance()->heroScale*scale);

    if(this->pos>4){
        this->skeletonNode->setScale(1,1);
    }else{
        this->skeletonNode->setScale(-1,1);
    }
    this->addChild(skeletonNode);
    this->skeletonNode->setEndListener(CC_CALLBACK_1(VFighter::onAnimationEnd, this));
    //this->skeletonNode->setAnimation(fstate::idle, ani_idle, false);
    
    
    //-------------------------------------------------------------------------------
    Label* label=Label::createWithTTF(Value(pos).asString(), "Marker Felt.ttf", 32);
    this->addChild(label);
    label->setPosition(skeletonNode->getPosition());
    label->setColor(Color3B(255,0,0));
    //-------------------------------------------------------------------------------

    
    this->hpBg=Sprite::create("battle_HP_1.png");
    this->addChild(hpBg);
    this->hpBg->setPosition(skeletonNode->getPosition()+Vec2(0,200));

    this->hpBar=ProgressTimer::create(Sprite::create("battle_HP_2.png"));
    this->addChild(hpBar);
    this->hpBar->setPosition(skeletonNode->getPosition()+Vec2(0,200));
    this->hpBar->setType(ProgressTimer::Type::BAR);
    this->hpBar->setMidpoint(Vec2(0,0));
    this->hpBar->setBarChangeRate(Vec2(1, 0));
    this->hpBar->setPercentage(100.);
	return true;
}

void VFighter::onEnter()
{
    Node::onEnter();
    this->stand();
}

void VFighter::stand()
{
    this->skeletonNode->clearTrack(fstate::run);
    this->spEntry = this->skeletonNode->setAnimation(fstate::idle, ani_idle, true);
}

void VFighter::run()
{
    this->state=fstate::run;

    if(this->getActionByTag(ACTION_RUN_TAG)){
        return;
    }
    Vec2 vec(pos>4?-960:960,0);
    MoveBy* move=MoveBy::create(5, vec);
    move->setTag(ACTION_RUN_TAG);
    this->runAction(move);
    
    this->spEntry = this->skeletonNode->setAnimation(fstate::run, ani_walk, true);
}

void VFighter::move(Vec2 vec)
{
//    this->armature->getAnimation()->play(ani_walk,1,1);
//    MoveBy* move=MoveBy::create(1, vec);
//    this->runAction(move);
}

void VFighter::attack(std::string actionName)
{
    this->spEntry = this->skeletonNode->setAnimation(fstate::attack, actionName, false);
}

void VFighter::attacked(PHit& pHit)
{
    this->fallHp(Value(pHit.hp()));
    this->hpBar->runAction(ProgressTo::create(0.3, pHit.perhp()));
    std::string animName="";
    if(this->spEntry && this->spEntry->animation){
        animName=this->spEntry->animation->name;
    }
    if(this->state==fstate::onAir){
        this->spEntry = this->skeletonNode->setAnimation(fstate::attackedOnAir, ani_onAirAttacked, false);
        this->attackedEffect();
        this->pause();
        this->skeletonNode->runAction(Sequence::create(DelayTime::create(0.1),CallFunc::create(CC_CALLBACK_0(VFighter::resume, this)), NULL));
    }
    else if(animName!=ani_attacked && animName!=ani_defence && animName!= ani_attack && animName!=ani_skillAttack1 && animName!=ani_skillAttack2 && animName!=ani_win){
        this->spEntry = this->skeletonNode->setAnimation(fstate::attacked ,ani_attacked, false);
        this->attackedEffect();
    }
}

void VFighter::attackedEffect()
{
    Clip* clip=Clip::create("hurt_wuli.plist", "hurt_wuli",20);
    BattleMgr::getInstance()->view->addChild(clip,2);
    clip->setPosition(this->getPosition()+Vec2(0,100));
    clip->play();
}

void VFighter::attackedOnAir(PHit &pHit)
{
    this->fallHp(Value(pHit.hp()));
    this->hpBar->runAction(ProgressTo::create(0.3, pHit.perhp()));
    
    this->spEntry = this->skeletonNode->setAnimation(fstate::onAir, ani_attackedOnAir, true);
  
    this->state=fstate::onAir;
    CallFunc* cf=CallFunc::create(CC_CALLBACK_0(VFighter::onAirFall, this));
    Vec2 topVec=Vec2(0,80);
    
//    float dis=this->pos<5?-30:30;
//    Vec2 position=this->getPosition();
//    ccBezierConfig bezierCon;
//    bezierCon.controlPoint_1=Vec2(dis, 220);//控制点1
//    bezierCon.controlPoint_2=Vec2(dis*1.2, 350);//控制点2
//    bezierCon.endPosition =Vec2(dis*2, 0);// 结束位置
//    BezierBy* bezierBy = BezierBy::create(1.1, bezierCon);
    MoveBy* move=MoveBy::create(0.5, Vec2(0,300));

    Sequence* sq=Sequence::create(move,move->reverse(),cf, NULL);
    this->runAction(sq);
}

void VFighter::onAirFall()
{
    this->skeletonNode->clearTrack(fstate::onAir);
    std::string animName=this->spEntry?this->spEntry->animation->name:"";
    if (animName != ani_onAirFall) {
        this->spEntry = this->skeletonNode->setAnimation(fstate::onAirFall, ani_onAirFall, false);
    }
}

void VFighter::spell(std::string actionName)
{
    if(this->skeletonNode->getState()->data->skeletonData->animations[0]->name != ani_spell){;
        this->spEntry = this->skeletonNode->setAnimation(fstate::spell, ani_spell, false);
    }
    this->state=fstate::spell;
}

void VFighter::defence(PHit& pHit)
{
    this->fallHp(Value(pHit.hp()));
    this->hpBar->runAction(ProgressTo::create(0.3, pHit.perhp()));

    std::string animName=this->spEntry?this->spEntry->animation->name:"";
    if(animName != ani_defence){
        this->spEntry = this->skeletonNode->setAnimation(fstate::defence, ani_defence, 0);
    }
}

void VFighter::die(PHit& pHit)
{
    this->state=fstate::die;
    this->skeletonNode->clearTracks();
    this->spEntry = this->skeletonNode->setAnimation(fstate::die, ani_die, false);

    this->fallHp(Value(pHit.hp()));
    this->hpBar->setPercentage(pHit.perhp());
    this->hpBar->runAction(ProgressTo::create(0.3, pHit.perhp()));
    
    this->stopActionByTag(ACTION_RUN_TAG);
    this->stopActionByTag(ACTION_SHOOT_TAG);
}

void VFighter::dieClear()
{
    BattleMgr::getInstance()->clearDieNpc(pos);
}

void VFighter::fallHp(Value num)
{
    std::string fileName=num.asInt()>0?"num_hp.png":"shuzi3.png";
    Label* label=Label::createWithCharMap(fileName, 26, 32, '1');
    label->setString(num.asString());
    label->setScale(2);
    this->addChild(label);
    Vec2 pos=this->skeletonNode->getPosition();
    label->setPosition(Vec2(pos.x,pos.y+180));
    ScaleTo* scale1=ScaleTo::create(0.15, 1);
    
    MoveBy* move=MoveBy::create(0.5, Vec2(0, 80));
    Sequence* sq=Sequence::create(DelayTime::create(0.2),FadeOut::create(0.3), NULL);
    
    Spawn* sp3=Spawn::create(move,sq, NULL);
    CallFunc* cf4=CallFunc::create(CC_CALLBACK_0(Label::removeFromParent, label));
    
    
    label->runAction(Sequence::create(scale1,DelayTime::create(0.3),sp3,cf4, NULL));
//
//    Spawn* spawn1=Spawn::create(MoveBy::create(0.2,Vec2(0,60)),ScaleTo::create(0.3, 0.9), NULL);
//    EaseOut* ease=EaseOut::create(spawn1,2);
//    Spawn* spawn2=Spawn::create(MoveBy::create(0.3,Vec2(0,60)),Sequence::create(DelayTime::create(0.6),FadeOut::create(0.3),NULL), NULL);
//    
//    label->runAction(CCSequence::create(ease,spawn2,DelayTime::create(0.5),
//                                        CallFunc::create(CC_CALLBACK_0(Label::removeFromParent, label)), NULL));
    
//    this->hitWord();
}

void VFighter::hitWord()
{
    Sprite* word=Sprite::create("hit.jpg");
    this->addChild(word);
    word->setScale(0.2);
    word->setPosition(Vec2(30,this->skeletonNode->boundingBox().size.height));
    MoveBy* move=MoveBy::create(0.3, Vec2(0, 100));
    Spawn* scaleMove=Spawn::create(EaseOut::create(move,2),EaseOut::create(ScaleTo::create(0.3, 0.8),2), NULL);
    CallFunc* cf=CallFunc::create(CC_CALLBACK_0(Sprite::removeFromParent, word));
    Sequence* sq=Sequence::create(scaleMove,DelayTime::create(0.2),FadeTo::create(0.2, 0),cf,NULL);
    word->runAction(sq);
}

void VFighter::revive()
{
    this->stopActionByTag(HERO_DIE_TAG);
}

void VFighter::win()
{
    this->state=fstate::win;
    
    this->spEntry = this->skeletonNode->setAnimation(fstate::win, ani_win, false);
}

// 直线弹道
float VFighter::lineThrow(std::string bulletName,Vec2 end,int count)
{
    spBone* bone=this->skeletonNode->findBone("hand");
    //Vec2 p=this->skeletonNode->convertToWorldSpaceAR(Vec2(bone->x,bone->y));
    //Vec2 end=Vec2(mf->view->getPositionX(),mf->view->getPositionY());
    Vec2 p=Vec2(this->getPositionX(),this->getPositionY()+130);
    float duration;
    for(int i=0;i<count;i++){
        Clip* bullet=Clip::create(bulletName+".plist", bulletName);
        if(this->pos>4) bullet->setScale(-1);
        bullet->play(true);
        BattleMgr::getInstance()->view->addChild(bullet,2);
        bullet->setVisible(false);
        bullet->setPosition(p);
        duration=abs(end.x-p.x)/1600.0;
        
        MoveTo* move=MoveTo::create(duration, Vec2(end.x,end.y+130));
        CallFunc* clear=CallFunc::create(CC_CALLBACK_0(Clip::removeFromParent,bullet));
        
        bullet->runAction(Sequence::create(DelayTime::create(ARROW_GAP*i),Show::create(),move,clear,NULL));
    }
    
    return duration;
}

//弧线弹道,被塞尔曲线计算
float VFighter::arcThrow(std::string bulletName,MFighter* mf,int count)
{
//    Vec2 p = this->armature->getBone("man_ren_qiubang1")->getDisplayRenderNode()->convertToWorldSpaceAR( Vec2(0, 0));
//    
//    Armature* bullet=Armature::create("man animation");
//    bullet->getAnimation()->play("skillAttack1_effect2",0,1);
////    if(this->pos<5) bullet->setScale(-1);
//    bullet->setScale(-1);
//    
//    BattleMgr::getInstance()->view->addChild(bullet,2);
//    bullet->setPosition(p);
//    Vec2 end=mf->view->getPosition()+Vec2(0,60);

//    float duration=abs(end.x-p.x)/1200.;
//    Vec2 mid=pos<5?Vec2(p.x+abs(end.x-p.x)/2,end.y+100):Vec2(p.x-abs(end.x-p.x)/2,end.y+150);
//    BezierMove* move=BezierMove::create(duration, end,mid);
//    
////    ccBezierConfig c={end,mid,mid+Vec2(100,100)};
////    BezierTo* move=BezierTo::create(duration, c);
//    
//    bullet->runAction(Sequence::create(move,CallFunc::create(CC_CALLBACK_0(Armature::removeFromParent,bullet)), NULL));
    
    float duration=0.6;
    return duration;
}

//穿刺弹道，快速穿透
float VFighter::impaleThrow(std::string bulletName)
{
    return 0.3;
}

void VFighter::setAnimation(int trackIndex, std::string animName ,bool loop)
{
    this->spEntry=this->skeletonNode->setAnimation(trackIndex, animName, loop);
}

void VFighter::onAnimationEnd(int trackIndex)
{
    //log("%d end", trackIndex);
    switch (trackIndex) {
        case fstate::attack:
        {
            this->stand();
            break;
        }
        case fstate::attacked:
        case fstate::defence:
        //case fstate::onAir:
        {
            this->stand();
            break;
        }
        case fstate::attackedOnAir:
        {
            break;
        }
        case ::onAirFall:
        {
            this->state=fstate::idle;
            this->stand();
            break;
        }
        case fstate::die:
        {
            Sequence* sq=Sequence::create(DelayTime::create(0.2),FadeOut::create(2.0),CallFunc::create(CC_CALLBACK_0(VFighter::dieClear, this)), NULL);
            this->skeletonNode->runAction(sq);
            this->hpBg->setVisible(false);
            this->hpBar->setVisible(false);
            break;
        }
        case fstate::win:
        {
            BattleMgr::getInstance()->winPos=this->pos;
            this->runAction(Sequence::create(DelayTime::create(1.0),CallFunc::create(CC_CALLBACK_0(BattleMgr::startEndDram, BattleMgr::getInstance())), NULL));
            break;
        }
        default:
            break;
    }
}

void VFighter::onExit()
{
    Node::onExit();
}