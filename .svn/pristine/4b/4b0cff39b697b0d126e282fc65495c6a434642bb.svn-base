//
//  RotatList.cpp
//  fancyHeart
//
//  Created by 秦亮亮 on 14-6-30.
//
//

#include "RotateList.h"

RotateList::~RotateList()
{
    this->items.clear();
}

RotateList* RotateList::create()
{
    RotateList* widget = new RotateList();
    if (widget && widget->init())
    {
        widget->autorelease();
        return widget;
    }
    CC_SAFE_DELETE(widget);
    return nullptr;
}

void RotateList::onEnter()
{
    Layout::onEnter();
    scheduleUpdate();
}

bool RotateList::init()
{
    if (Layout::init())
    {
        tagNumAtMiddle=0;
        addToNum = 0;
        picNum = 0;
        return true;
    }
    return false;
}

//移动坐标
bool RotateList::scrollChildren(float touchOffsetX, float touchOffsetY)
{
    bool scrollenabled = true;
    float realOffset = touchOffsetX;
    
    Size widgetSize = this->panelSize;
    auto widgetEnd = this->getChildByTag(itemNum-1);
    auto widgetFirst = this->getChildByTag(0);
    isBack = true;
    //向左移动最多确保最后一个模版在中间位置
    if (widgetEnd->getPositionX()+touchOffsetX <= widgetSize.width/2) {
        isBack = false;
        realOffset = widgetSize.width/2 - widgetEnd->getPositionX();
    }
    //向右移动最多确保第一个要在中间位置
    if (widgetFirst->getPositionX()+touchOffsetX >= widgetSize.width/2) {
        isBack = false;
        realOffset = widgetSize.width/2 -widgetFirst->getPositionX();
    }
    changePos(Vec2(realOffset,0));

    //改变坐标以及scale
    change();
    this->resetZOrder();
    if (isBack == false) {
        this->setMiddleNum();
    }
    setSilderPercent();
    return scrollenabled;
}
//更改层级
void RotateList::resetZOrder()
{
    Size widgetSize = this->panelSize;
    auto dis = this->panelSize.width/haveItemNum;
    for (int i = 0; i<itemNum; ++i) {
        auto widget = this->getChildByTag(i);
        int x= widget->getPositionX();
        //改变层级setLocalZOrder 当x坐标在中间图片范围内
        if (x>= (widgetSize.width/2-dis/2) && x<=(widgetSize.width/2+dis/2)) {
            widget->setLocalZOrder(itemNum);
        }else if (x > widgetSize.width/2+dis/2) {
            widget->setLocalZOrder(itemNum-i-1);
        }else if(x< (widgetSize.width/2-dis/2)){
            widget->setLocalZOrder(i);
        }
    }
}

//移动各个模版坐标
void RotateList::changePos(const Vec2 &realOffset)
{
    for (int i = 0; i<itemNum; ++i) {
        auto widget = this->getChildByTag(i);
        widget->setPosition(widget->getPosition()+realOffset);
    }
}
//释放,并且设置层级关系
void RotateList::handleReleaseLogic(const Vec2 &touchPoint)
{
    //把世界坐标转换到当前节点的本地坐标系
    this->touchEndedPoint = convertToNodeSpace(touchPoint);
    float totalDis = 0.0f;
    totalDis = this->touchEndedPoint.x - this->touchBeganPoint.x;
    goDistance = totalDis;//记录移动的距离，根据距离看是否要更换图片
    
    if (slidTime <= 0.016f){
        return;
    }
    Vec2 dir;
    
    if (totalDis < 0.0f)
    {
        dir = Vec2(-1.0f, 0.0f);;
    }
    else
    {
        dir = Vec2(1.0f, 0.0f);;
    }
    //fabs：求浮点数绝对值
    float orSpeed = MIN(fabs(totalDis)/(slidTime), 1000);//初速度
    startAutoScrollChildrenWithOriginalSpeed(dir, orSpeed, true, -1000);//加速度是固定值－1000
    
    slidTime = 0.0f;
    bePressed = false;
    
}

void RotateList::startAutoScrollChildrenWithOriginalSpeed(const Vec2& dir, float v, bool attenuated, float acceleration)
{
    stopAutoScrollChildren();
    autoScrollDir = dir;
    isAutoScrollSpeedAttenuated = attenuated;
    autoScrollOriginalSpeed = v;
    autoScroll = true;
    autoScrollAcceleration = acceleration;//加速度
}

void RotateList::stopAutoScrollChildren()
{
    autoScroll = false;//先让它停下来
    autoScrollOriginalSpeed = 0.0f;
    autoScrollAddUpTime = 0.0f;
}

//回调函数
void RotateList::changeMiddleEvent(Widget*widget,int middleNum)
{
    if (this->eventCallback) {
        this->eventCallback(EventType::SCROLL_MIDDLE,widget,middleNum);
    }
}

//回调函数，通知index
void RotateList::tellIndexEvent(Widget* item,int num)
{
    if (this->eventCallback) {
        this->eventCallback(EventType::SET_ITEM_DATA,item,num);
    }
}

//回弹
void RotateList::goBack()
{
    this->isBackScoll = true;
    //查看现在哪个处于中间位置
    Size widgetSize = this->panelSize;
    auto dis = widgetSize.width/haveItemNum;
    this->setMiddleNum();
    //再重新设定坐标（确定没有误差）
    auto itemPos = widgetSize.width/haveItemNum;//每个模版间距离
    float x;
    for (int i=0; i<itemNum; ++i) {
        auto widget = this->getChildByTag(i);
        if (tagNumAtMiddle>i) {
            x=widgetSize.width/2 -itemPos*(tagNumAtMiddle-i);
        }else if (tagNumAtMiddle==i){
            x =widgetSize.width/2;
        }else if (tagNumAtMiddle<i){
            x =widgetSize.width/2 +itemPos*(i-tagNumAtMiddle);
        }
        if (i == tagNumAtMiddle) {
            //中间卡牌需要走x坐标长度
            this->goDis = x-widget->getPosition().x;
            if(goDis == 0) this->isBackScoll = false;
            else{
                this->backStep = ceil(abs(goDis)/this->endOffsetX);
            }
            log("abs(goDis):%f",abs(goDis));
            log("this->endOffsetX:%f",this->endOffsetX);
            log("goDis:%f",ceil(abs(goDis)/this->endOffsetX));
        }
    }
}

void RotateList::setMiddleNum()
{
    //查看现在哪个处于中间位置
    Size widgetSize = this->panelSize;
    auto dis = widgetSize.width/haveItemNum;
    for (int i = 0; i<itemNum; ++i) {
        auto widget = this->getChildByTag(i);
        int x= widget->getPositionX();
        //改变层级setLocalZOrder 当x坐标在中间图片范围内
        if (x>= (widgetSize.width/2-dis/2) && x<=(widgetSize.width/2+dis/2)) {
            tagNumAtMiddle = i;
        }
    }

}

void RotateList::update(float dt)
{
    if (autoScroll)
    {
        if (isAutoScrollSpeedAttenuated)
        {
            //总时间
            float lastTime = autoScrollAddUpTime;
            autoScrollAddUpTime += dt;
            //现在速度：初始速度＋加速度＊时间
            float nowSpeed = autoScrollOriginalSpeed + autoScrollAcceleration * autoScrollAddUpTime;
            if (nowSpeed <= 0.0f)
            {
                stopAutoScrollChildren();
                if (isBack) {
                    //回弹
                    goBack();
                }
            }
            else
            {
                float timeParam = lastTime * 2 + dt;
                //autoScrollOriginalSpeed:初始速度
                //autoScrollAcceleration:加速度
                float offset = (autoScrollOriginalSpeed + autoScrollAcceleration * timeParam * 0.5f) * dt;
                float offsetX = offset * autoScrollDir.x;
                float offsetY = offset * autoScrollDir.y;
                this->endOffsetX = abs(offsetX);
                if (!scrollChildren(offsetX, offsetY))
                {
                    stopAutoScrollChildren();
                }
            }
        }
    }
    //手触发屏幕后时间会进行加操作
    if (this->bePressed){
        this->slidTime += dt;
    }
    //加速度完毕后缓动回到正规位置
    if (this->isBackScoll) {
        backStep--;
        auto para = 1;
        if (this->goDis>=0) {
            para = 1;
        }else{
            para = -1;
        }
        if (backStep==0) {
            float num = abs(this->goDis) - floor(abs(this->goDis)/this->endOffsetX)*this->endOffsetX;
            scrollChildren(num*para,0);
            this->goDis = 0;
            this->isBackScoll = false;
            this->endOffsetX = 0;
        }else{
            scrollChildren(this->endOffsetX*para,0);
        }
        
    }
}

void RotateList::checkChildInfo(int handleState,Widget* sender,const Vec2 &touchPoint)
{
    switch (handleState)
    {
        case 0:
            this->touchBeganPoint = convertToNodeSpace(touchPoint);
            //起始移动点
            this->touchMovingPoint = this->touchBeganPoint;
            this->slidTime = 0.0f;
            this->bePressed = true;
            break;
        case 1:
        {
            float offset = (sender->getTouchStartPos() - touchPoint).getLength();
            if (offset > this->childFocusCancelOffset){
                sender->setHighlighted(false);
                this->touchMovedPoint = convertToNodeSpace(touchPoint);
                Vec2 delta = this->touchMovedPoint - this->touchMovingPoint;
                //随着移动，起始移动点坐标变化
                this->touchMovingPoint = this->touchMovedPoint;
                scrollChildren(delta.x, 0.0f);
                
                //模版位置的变化，随着移动
                if (this->items.size() != 0) {
                    Size widgetSize=this->panelSize;;
                    auto dis = widgetSize.width/haveItemNum;
                    int overIndex = float(itemNum/2);
                    auto widget = this->items.at(0);//this->getChildByTag(overIndex);
                    auto widget1 = this->items.at(itemNum-1);
                    int x =widget->getPositionX();
                    int x1 =widget1->getPositionX();
                    if (x<widgetSize.width/2-dis*ceilf(itemNum/2)) {//左侧去掉，右侧添加
                        if (picNum > showPicNum+addToNum) {
                            removeItem(x);
                        }
                    }else if (x1>widgetSize.width/2+dis*ceilf(itemNum/2)){//右侧去掉一个模版，左侧添加一个模版
                        if (addToNum !=0) {
                            insertCustomItem(x1);
                        }
                    }
                }
            }
        }
            break;
        case 2:
            handleReleaseLogic(touchPoint);
            break;
    }
}

//移动过程中调用的方法，用来改变y轴坐标，并且调用setMoveType方法用来改变缩放和角度值
void RotateList::change()
{
    for (int i = 0; i<itemNum; ++i) {
        auto widget = this->getChildByTag(i);
        //设置Y位置
        int x =widget->getPositionX();
        //将长度widgetSize.width+widgetSize.width/2设置为半个圆弧的长度，通过x坐标计算y值
        widget->setPosition(Vec2(x,getYPos(x)));
        setMoveType(widget,x);
    }
}

//移动的过程中处理缩放以及角度变化
void RotateList::setMoveType(Node* widget,int x)
{
    Size widgetSize=this->panelSize;
    //缩放：越往中心点缩放系数越大
    float wholePosX = widget->getPositionX();
    float scaleNum;
    if ( wholePosX< widgetSize.width/2) {//如果图片在屏幕中心点左边
        //模版的坐标／整个屏幕宽度的一半） ＋ 2/5
        scaleNum = pow(wholePosX/(widgetSize.width/2),1.06);
    }else if (wholePosX > widgetSize.width/2){//如果图片在屏幕中心点右边
        //（整个屏幕的宽度 － 模版的坐标）／整个屏幕宽度的一半）） ＋ 2/5
        scaleNum = pow((widgetSize.width - wholePosX)/(widgetSize.width/2),1.06);
    }else{
        scaleNum = 1;
    }
    widget->setScale(fmax(scaleNum,0.5));
    //旋转角度
    int rotation = (180/this->radius/2)*(x - this->panelSize.width/2);
    widget->setRotation(rotation);
}

//设置样式:此函数的参数分别是模版，正弦弧度的一个弧度的直线长度，弹窗大小，模版直接间距
void RotateList::setItemModel(Widget* model,float radius,Size panelSize,float itemDistance)
{
    if (!model)
    {
        return;
    }
    Size winSize=Director::getInstance()->getWinSize();
    this->panelSize =panelSize.width==0?winSize:panelSize;
    this->itemDistance = itemDistance==0?winSize.width/COMMON_DISTANCE:itemDistance;
    this->radius = radius==0?winSize.width/2*3:radius;
    this->model = model;
    this->model->setTouchEnabled(true);
    this->model->addTouchEventListener(CC_CALLBACK_2(RotateList::touchEvent,this));
    this->model->retain();
    this->haveItemNum= floor(this->panelSize.width/this->itemDistance);//整个显示界面当前放几个模版＋1(整个界面被分成几个平均等份)
    showPicNum =haveItemNum+4;
}

void RotateList::pushBackItem()
{
    itemNum = int(this->items.size());
    //加入新加载后的所有对象之后重新放在舞台上
    Size widgetSize = this->panelSize;
    for (int i = 0; i<itemNum; ++i) {
        Widget* newItem1 = this->items.at(i);
        int x =(widgetSize.width/haveItemNum)*i + widgetSize.width/2;
        newItem1->setTag(i);
        //初始设置位置
        newItem1->setPosition(Vec2(x,getYPos(x)));
        setMoveType(newItem1,x);
        //初始设置层级setLocalZOrder
        if (x >= widgetSize.width/2) {
            newItem1->setLocalZOrder(itemNum-i);
        }else{
            newItem1->setLocalZOrder(i);
        }
    }
}

//根据x坐标求得y坐标
float RotateList::getYPos(float x)
{
    Size widgetSize = this->panelSize;
    auto y =widgetSize.height*sin((x+(this->radius-this->panelSize.width)/2)*(3.1415926/this->radius))*1/3;
    return y;
}
//设置滚动到第几个在中间位置，index从0起始
void RotateList::setRoll(int index)
{
    if (this->items.size() == 0) {
        return;
    }
    tagNumAtMiddle = index;
    auto widgetSize = this->panelSize;
    auto itemPos = widgetSize.width/haveItemNum;//每个模版间距离
    float x;
    for (int i=0; i<itemNum; ++i) {
        auto widget = this->getChildByTag(i);
        if (index>i) {
            x=widgetSize.width/2 -itemPos*(index-i);
        }else if (index==i){
            x =widgetSize.width/2;
        }else if (index<i){
            x =widgetSize.width/2 +itemPos*(i-index);
        }
        widget->setPosition(x, getYPos(x));
        //层级setLocalZOrder
        auto dis = widgetSize.width/haveItemNum;
        if (x>= (widgetSize.width/2-dis/4) && x<=(widgetSize.width/2+dis/4)) {
            widget->setLocalZOrder(itemNum);
        }else if (x > widgetSize.width/2+dis/4) {
            widget->setLocalZOrder(itemNum-i-1);
        }else if(x< (widgetSize.width/2-dis/4)){
            widget->setLocalZOrder(i);
        }
        setMoveType(widget,widget->getPositionX());
    }
    this->changeMiddleEvent(this->items.at(tagNumAtMiddle),tagNumAtMiddle);
}

//删除一张模版,将第一个放后面
void RotateList::removeItem(ssize_t index)
{
    Widget* item = this->items.at(0);
    if (!item)
    {
        return;
    }
    this->items.eraseObject(item);
    this->items.pushBack(item);
    
    addToNum ++;
    Size widgetSize = this->panelSize;
    auto itemPos = widgetSize.width/haveItemNum;//每个模版间距离
    auto widget = this->getChildByTag(int(this->items.size()) -2);
    //设置Y位置
    int x = this->items.at(itemNum-2)->getPositionX()+itemPos;
    item->setPosition(Vec2(x,getYPos(x)));
    for (int i = 0; i<this->items.size(); ++i) {
        Widget* newItem1 = this->items.at(i);
        newItem1->setTag(i);
        this->tellIndexEvent(newItem1,addToNum+i);
    }
}

//将最后一个放前面(在后面或者前面加一张模版)
void RotateList::insertCustomItem(ssize_t index)
{
    Widget* item = this->items.at(itemNum-1);
    if (!item)
    {
        return;
    }
    this->items.eraseObject(item);
    this->items.insert(0, item);
    
    addToNum --;
    Size widgetSize = this->panelSize;
    auto itemPos = widgetSize.width/this->haveItemNum;//每个模版间距离
    auto widget = this->getChildByTag(1);
    //设置Y位置
    int x =this->items.at(1)->getPositionX() - itemPos;
    item->setPosition(Vec2(x,getYPos(x)));
    
    for (int i = 0; i<this->items.size(); ++i) {
        Widget* newItem1 = this->items.at(i);
        newItem1->setTag(i);
        this->tellIndexEvent(newItem1,addToNum+i);
    }
}

Vector<Widget*>& RotateList::getItems()
{
    return this->items;
}

void RotateList::pushBackDefaultItem(int num)
{
    if (!this->model)
    {
        return;
    }
    ++picNum;
    
    if (this->items.size()<showPicNum) {
        Widget* newItem;
        if (this->picNum > int(this->items.size())) {
            newItem = this->model->clone();
            //设置锚点位置到右下角
//        newItem->setAnchorPoint(ccp(0.0f,0.0f));
            this->items.pushBack(newItem);
            addChild(newItem);
        }else{
            newItem = items.at(picNum - 1);
        }
        newItem->addTouchEventListener(CC_CALLBACK_2(RotateList::touchEvent,this));
        this->tellIndexEvent(newItem,picNum-1);
    }
}

//设置数量
void RotateList::setNum(int num)
{
    this->tagNumAtMiddle = 0;
    this->total=num;
    this->picNum = 0;
    
    //已有模版长度和需要模版长度的差值
    int value;
    //如果已存模版长度大于等于需要模版长度，去除多余的模版
    if (num<=this->items.size()) {
        value = int(this->items.size()) - num;
        for (int j=0; j<value; j++) {
            Widget*item = this->items.at(int(this->items.size())-1);
            item->cleanup();
            item->removeFromParent();
            this->items.popBack();
        }
        for (int k = 0; k<this->items.size(); k++) {
            Widget* item = this->items.at(k);
            this->tellIndexEvent(item,k);
        }
    }else{//如果已有模版数量少于所需模版数量，那么添加模版
        value = num - int(this->items.size());
        for (int i=0 ; i<num; i++) {
            this->pushBackDefaultItem(num);
        }
    }

    this->pushBackItem();
    if (num!=0) {
        this->changeMiddleEvent(this->items.at(tagNumAtMiddle),tagNumAtMiddle);
    }
}

void RotateList::setSlider(Slider* slider)
{
    this->slider = slider;
    slider->setPercent(0);
    slider->addEventListener(CC_CALLBACK_2(RotateList::sliderEvent,this));
}

//滚动条到回调函数
void RotateList::sliderEvent(Ref *pSender, Slider::EventType type)
{
    Slider* slider = static_cast<Slider*>(pSender);
    if(type==Slider::EventType::ON_PERCENTAGE_CHANGED){
        //计算滚动到哪一个
        int index = floor(this->items.size()*(slider->getPercent())/100);
        tagNumAtMiddle = index;
        
        float stepLength = (this->items.size()-1)*this->itemDistance*(slider->getPercent())/100 - preDistance;
        scrollChildren(-stepLength,0);
        preDistance += stepLength;
        
    }else if(type==Slider::EventType::ON_PERCENTAGE_CHANGE_ENDED){
        this->endOffsetX = 10;
        stopAutoScrollChildren();
        goBack();
        setSilderPercent();
    }
}
//对slider位置进行移动
void RotateList::setSilderPercent()
{
    //这里也需要对slider位置进行移动
    int percent = 100*tagNumAtMiddle/this->items.size();
    this->slider->setPercent(percent);
}

int RotateList::getMiddleIndex()
{
    return tagNumAtMiddle;
}

void RotateList::touchEvent(cocos2d::Ref *pSender, TouchEventType type)
{
    switch (type)
    {
        case TouchEventType::ENDED:
            if (this->eventCallback) {
                Widget*sprite=static_cast<Widget*>(pSender);
                if (sprite)
                {
                    this->curSelectedIndex = this->items.getIndex(sprite);
                }
                if (int(this->curSelectedIndex + addToNum) != tagNumAtMiddle) {
                    return;
                }
                Widget* widget=static_cast<Widget*>(pSender);
                this->eventCallback(EventType::TOUCH_ITEM,widget,int(this->curSelectedIndex + addToNum));
            }
            break;
    }
}

void RotateList::addEventListener(const rotateListCallback& callback)
{
    this->eventCallback = callback;
}

