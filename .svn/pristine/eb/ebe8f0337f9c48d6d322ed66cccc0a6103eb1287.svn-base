// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: account.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "account.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* LoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateRoleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateRoleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PSaveFormation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PSaveFormation_reflection_ = NULL;
const ::google::protobuf::Descriptor* PRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* PUpRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PUpRole_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_account_2eproto() {
  protobuf_AddDesc_account_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "account.proto");
  GOOGLE_CHECK(file != NULL);
  LoginReq_descriptor_ = file->message_type(0);
  static const int LoginReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, areaid_),
  };
  LoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginReq_descriptor_,
      LoginReq::default_instance_,
      LoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginReq));
  LoginResp_descriptor_ = file->message_type(1);
  static const int LoginResp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, itemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, npclist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, gate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, npcids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, randomname_),
  };
  LoginResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginResp_descriptor_,
      LoginResp::default_instance_,
      LoginResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginResp));
  CreateRoleReq_descriptor_ = file->message_type(2);
  static const int CreateRoleReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleReq, spriteid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleReq, rolename_),
  };
  CreateRoleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateRoleReq_descriptor_,
      CreateRoleReq::default_instance_,
      CreateRoleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateRoleReq));
  PSaveFormation_descriptor_ = file->message_type(3);
  static const int PSaveFormation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSaveFormation, npcids_),
  };
  PSaveFormation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PSaveFormation_descriptor_,
      PSaveFormation::default_instance_,
      PSaveFormation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSaveFormation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSaveFormation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PSaveFormation));
  PRole_descriptor_ = file->message_type(4);
  static const int PRole_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRole, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRole, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRole, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRole, viplvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRole, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRole, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRole, stamina_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRole, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRole, ishavemail_),
  };
  PRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PRole_descriptor_,
      PRole::default_instance_,
      PRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PRole));
  PUpRole_descriptor_ = file->message_type(5);
  static const int PUpRole_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PUpRole, fieldtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PUpRole, addvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PUpRole, finalvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PUpRole, itemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PUpRole, updatepkid_),
  };
  PUpRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PUpRole_descriptor_,
      PUpRole::default_instance_,
      PUpRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PUpRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PUpRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PUpRole));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_account_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginReq_descriptor_, &LoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginResp_descriptor_, &LoginResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateRoleReq_descriptor_, &CreateRoleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PSaveFormation_descriptor_, &PSaveFormation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PRole_descriptor_, &PRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PUpRole_descriptor_, &PUpRole::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_account_2eproto() {
  delete LoginReq::default_instance_;
  delete LoginReq_reflection_;
  delete LoginResp::default_instance_;
  delete LoginResp_reflection_;
  delete CreateRoleReq::default_instance_;
  delete CreateRoleReq_reflection_;
  delete PSaveFormation::default_instance_;
  delete PSaveFormation_reflection_;
  delete PRole::default_instance_;
  delete PRole_reflection_;
  delete PUpRole::default_instance_;
  delete PUpRole_reflection_;
}

void protobuf_AddDesc_account_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_item_2eproto();
  ::protobuf_AddDesc_gate_2eproto();
  ::protobuf_AddDesc_npc_2eproto();
  ::protobuf_AddDesc_mail_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\raccount.proto\032\nitem.proto\032\ngate.proto\032"
    "\tnpc.proto\032\nmail.proto\"5\n\010LoginReq\022\014\n\004uu"
    "Id\030\001 \002(\t\022\013\n\003key\030\002 \002(\t\022\016\n\006areaId\030\003 \002(\005\"\241\001"
    "\n\tLoginResp\022\016\n\006result\030\001 \002(\005\022\024\n\004role\030\002 \001("
    "\0132\006.PRole\022\030\n\010itemList\030\003 \003(\0132\006.PItem\022\026\n\007n"
    "pcList\030\004 \003(\0132\005.PNpc\022\030\n\004gate\030\005 \001(\0132\n.PGat"
    "eResp\022\016\n\006npcIds\030\006 \003(\003\022\022\n\nrandomName\030\007 \003("
    "\t\"3\n\rCreateRoleReq\022\020\n\010spriteId\030\001 \002(\005\022\020\n\010"
    "roleName\030\002 \002(\t\" \n\016PSaveFormation\022\016\n\006npcI"
    "ds\030\001 \003(\003\"\225\001\n\005PRole\022\016\n\006roleId\030\001 \002(\003\022\020\n\010ro"
    "leName\030\002 \002(\t\022\r\n\005level\030\003 \002(\005\022\016\n\006vipLvl\030\004 "
    "\002(\005\022\014\n\004coin\030\005 \002(\005\022\013\n\003rmb\030\006 \002(\005\022\017\n\007stamin"
    "a\030\007 \002(\005\022\013\n\003exp\030\010 \002(\005\022\022\n\nisHaveMail\030\t \002(\010"
    "\"h\n\007PUpRole\022\021\n\tfieldType\030\001 \002(\005\022\020\n\010addVal"
    "ue\030\002 \002(\005\022\022\n\nfinalValue\030\003 \002(\005\022\020\n\010itemType"
    "\030\004 \002(\t\022\022\n\nupdatePkId\030\005 \002(\003B1\n com.doteyp"
    "lay.game.message.protoB\rAccountProBuf", 677);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "account.proto", &protobuf_RegisterTypes);
  LoginReq::default_instance_ = new LoginReq();
  LoginResp::default_instance_ = new LoginResp();
  CreateRoleReq::default_instance_ = new CreateRoleReq();
  PSaveFormation::default_instance_ = new PSaveFormation();
  PRole::default_instance_ = new PRole();
  PUpRole::default_instance_ = new PUpRole();
  LoginReq::default_instance_->InitAsDefaultInstance();
  LoginResp::default_instance_->InitAsDefaultInstance();
  CreateRoleReq::default_instance_->InitAsDefaultInstance();
  PSaveFormation::default_instance_->InitAsDefaultInstance();
  PRole::default_instance_->InitAsDefaultInstance();
  PUpRole::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_account_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_account_2eproto {
  StaticDescriptorInitializer_account_2eproto() {
    protobuf_AddDesc_account_2eproto();
  }
} static_descriptor_initializer_account_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LoginReq::kUuIdFieldNumber;
const int LoginReq::kKeyFieldNumber;
const int LoginReq::kAreaIdFieldNumber;
#endif  // !_MSC_VER

LoginReq::LoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginReq::InitAsDefaultInstance() {
}

LoginReq::LoginReq(const LoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginReq::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  areaid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginReq::~LoginReq() {
  SharedDtor();
}

void LoginReq::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void LoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginReq_descriptor_;
}

const LoginReq& LoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

LoginReq* LoginReq::default_instance_ = NULL;

LoginReq* LoginReq::New() const {
  return new LoginReq;
}

void LoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    areaid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uuId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // required string key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_areaId;
        break;
      }

      // required int32 areaId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string uuId = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uuid(), output);
  }

  // required string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key(), output);
  }

  // required int32 areaId = 3;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->areaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string uuId = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // required string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // required int32 areaId = 3;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->areaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uuId = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // required string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required int32 areaId = 3;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginReq::MergeFrom(const LoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginReq::CopyFrom(const LoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LoginReq::Swap(LoginReq* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(key_, other->key_);
    std::swap(areaid_, other->areaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginReq_descriptor_;
  metadata.reflection = LoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginResp::kResultFieldNumber;
const int LoginResp::kRoleFieldNumber;
const int LoginResp::kItemListFieldNumber;
const int LoginResp::kNpcListFieldNumber;
const int LoginResp::kGateFieldNumber;
const int LoginResp::kNpcIdsFieldNumber;
const int LoginResp::kRandomNameFieldNumber;
#endif  // !_MSC_VER

LoginResp::LoginResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginResp::InitAsDefaultInstance() {
  role_ = const_cast< ::PRole*>(&::PRole::default_instance());
  gate_ = const_cast< ::PGateResp*>(&::PGateResp::default_instance());
}

LoginResp::LoginResp(const LoginResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  role_ = NULL;
  gate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResp::~LoginResp() {
  SharedDtor();
}

void LoginResp::SharedDtor() {
  if (this != default_instance_) {
    delete role_;
    delete gate_;
  }
}

void LoginResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResp_descriptor_;
}

const LoginResp& LoginResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

LoginResp* LoginResp::default_instance_ = NULL;

LoginResp* LoginResp::New() const {
  return new LoginResp;
}

void LoginResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_role()) {
      if (role_ != NULL) role_->::PRole::Clear();
    }
    if (has_gate()) {
      if (gate_ != NULL) gate_->::PGateResp::Clear();
    }
  }
  itemlist_.Clear();
  npclist_.Clear();
  npcids_.Clear();
  randomname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role;
        break;
      }

      // optional .PRole role = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_itemList;
        break;
      }

      // repeated .PItem itemList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_itemList;
        if (input->ExpectTag(34)) goto parse_npcList;
        break;
      }

      // repeated .PNpc npcList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_npcList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_npclist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_npcList;
        if (input->ExpectTag(42)) goto parse_gate;
        break;
      }

      // optional .PGateResp gate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_npcIds;
        break;
      }

      // repeated int64 npcIds = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npcIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 48, input, this->mutable_npcids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_npcids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_npcIds;
        if (input->ExpectTag(58)) goto parse_randomName;
        break;
      }

      // repeated string randomName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_randomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_randomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->randomname(this->randomname_size() - 1).data(),
            this->randomname(this->randomname_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_randomName;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .PRole role = 2;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->role(), output);
  }

  // repeated .PItem itemList = 3;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->itemlist(i), output);
  }

  // repeated .PNpc npcList = 4;
  for (int i = 0; i < this->npclist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->npclist(i), output);
  }

  // optional .PGateResp gate = 5;
  if (has_gate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->gate(), output);
  }

  // repeated int64 npcIds = 6;
  for (int i = 0; i < this->npcids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      6, this->npcids(i), output);
  }

  // repeated string randomName = 7;
  for (int i = 0; i < this->randomname_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->randomname(i).data(), this->randomname(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->randomname(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .PRole role = 2;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->role(), target);
  }

  // repeated .PItem itemList = 3;
  for (int i = 0; i < this->itemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->itemlist(i), target);
  }

  // repeated .PNpc npcList = 4;
  for (int i = 0; i < this->npclist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->npclist(i), target);
  }

  // optional .PGateResp gate = 5;
  if (has_gate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->gate(), target);
  }

  // repeated int64 npcIds = 6;
  for (int i = 0; i < this->npcids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(6, this->npcids(i), target);
  }

  // repeated string randomName = 7;
  for (int i = 0; i < this->randomname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->randomname(i).data(), this->randomname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->randomname(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .PRole role = 2;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role());
    }

    // optional .PGateResp gate = 5;
    if (has_gate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gate());
    }

  }
  // repeated .PItem itemList = 3;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  // repeated .PNpc npcList = 4;
  total_size += 1 * this->npclist_size();
  for (int i = 0; i < this->npclist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npclist(i));
  }

  // repeated int64 npcIds = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->npcids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->npcids(i));
    }
    total_size += 1 * this->npcids_size() + data_size;
  }

  // repeated string randomName = 7;
  total_size += 1 * this->randomname_size();
  for (int i = 0; i < this->randomname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->randomname(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginResp::MergeFrom(const LoginResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemlist_.MergeFrom(from.itemlist_);
  npclist_.MergeFrom(from.npclist_);
  npcids_.MergeFrom(from.npcids_);
  randomname_.MergeFrom(from.randomname_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_role()) {
      mutable_role()->::PRole::MergeFrom(from.role());
    }
    if (from.has_gate()) {
      mutable_gate()->::PGateResp::MergeFrom(from.gate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResp::CopyFrom(const LoginResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_role()) {
    if (!this->role().IsInitialized()) return false;
  }
  for (int i = 0; i < itemlist_size(); i++) {
    if (!this->itemlist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < npclist_size(); i++) {
    if (!this->npclist(i).IsInitialized()) return false;
  }
  if (has_gate()) {
    if (!this->gate().IsInitialized()) return false;
  }
  return true;
}

void LoginResp::Swap(LoginResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(role_, other->role_);
    itemlist_.Swap(&other->itemlist_);
    npclist_.Swap(&other->npclist_);
    std::swap(gate_, other->gate_);
    npcids_.Swap(&other->npcids_);
    randomname_.Swap(&other->randomname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResp_descriptor_;
  metadata.reflection = LoginResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateRoleReq::kSpriteIdFieldNumber;
const int CreateRoleReq::kRoleNameFieldNumber;
#endif  // !_MSC_VER

CreateRoleReq::CreateRoleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateRoleReq::InitAsDefaultInstance() {
}

CreateRoleReq::CreateRoleReq(const CreateRoleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateRoleReq::SharedCtor() {
  _cached_size_ = 0;
  spriteid_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateRoleReq::~CreateRoleReq() {
  SharedDtor();
}

void CreateRoleReq::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void CreateRoleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRoleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRoleReq_descriptor_;
}

const CreateRoleReq& CreateRoleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

CreateRoleReq* CreateRoleReq::default_instance_ = NULL;

CreateRoleReq* CreateRoleReq::New() const {
  return new CreateRoleReq;
}

void CreateRoleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    spriteid_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateRoleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 spriteId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spriteid_)));
          set_has_spriteid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roleName;
        break;
      }

      // required string roleName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateRoleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 spriteId = 1;
  if (has_spriteid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->spriteid(), output);
  }

  // required string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateRoleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 spriteId = 1;
  if (has_spriteid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->spriteid(), target);
  }

  // required string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateRoleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 spriteId = 1;
    if (has_spriteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spriteid());
    }

    // required string roleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateRoleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateRoleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateRoleReq::MergeFrom(const CreateRoleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spriteid()) {
      set_spriteid(from.spriteid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateRoleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoleReq::CopyFrom(const CreateRoleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoleReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CreateRoleReq::Swap(CreateRoleReq* other) {
  if (other != this) {
    std::swap(spriteid_, other->spriteid_);
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateRoleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateRoleReq_descriptor_;
  metadata.reflection = CreateRoleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PSaveFormation::kNpcIdsFieldNumber;
#endif  // !_MSC_VER

PSaveFormation::PSaveFormation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PSaveFormation::InitAsDefaultInstance() {
}

PSaveFormation::PSaveFormation(const PSaveFormation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PSaveFormation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PSaveFormation::~PSaveFormation() {
  SharedDtor();
}

void PSaveFormation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PSaveFormation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PSaveFormation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PSaveFormation_descriptor_;
}

const PSaveFormation& PSaveFormation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

PSaveFormation* PSaveFormation::default_instance_ = NULL;

PSaveFormation* PSaveFormation::New() const {
  return new PSaveFormation;
}

void PSaveFormation::Clear() {
  npcids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PSaveFormation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 npcIds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npcIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_npcids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_npcids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_npcIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PSaveFormation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 npcIds = 1;
  for (int i = 0; i < this->npcids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->npcids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PSaveFormation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 npcIds = 1;
  for (int i = 0; i < this->npcids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->npcids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PSaveFormation::ByteSize() const {
  int total_size = 0;

  // repeated int64 npcIds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->npcids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->npcids(i));
    }
    total_size += 1 * this->npcids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PSaveFormation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PSaveFormation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PSaveFormation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PSaveFormation::MergeFrom(const PSaveFormation& from) {
  GOOGLE_CHECK_NE(&from, this);
  npcids_.MergeFrom(from.npcids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PSaveFormation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PSaveFormation::CopyFrom(const PSaveFormation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSaveFormation::IsInitialized() const {

  return true;
}

void PSaveFormation::Swap(PSaveFormation* other) {
  if (other != this) {
    npcids_.Swap(&other->npcids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PSaveFormation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PSaveFormation_descriptor_;
  metadata.reflection = PSaveFormation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PRole::kRoleIdFieldNumber;
const int PRole::kRoleNameFieldNumber;
const int PRole::kLevelFieldNumber;
const int PRole::kVipLvlFieldNumber;
const int PRole::kCoinFieldNumber;
const int PRole::kRmbFieldNumber;
const int PRole::kStaminaFieldNumber;
const int PRole::kExpFieldNumber;
const int PRole::kIsHaveMailFieldNumber;
#endif  // !_MSC_VER

PRole::PRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PRole::InitAsDefaultInstance() {
}

PRole::PRole(const PRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PRole::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_LONGLONG(0);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  viplvl_ = 0;
  coin_ = 0;
  rmb_ = 0;
  stamina_ = 0;
  exp_ = 0;
  ishavemail_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PRole::~PRole() {
  SharedDtor();
}

void PRole::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void PRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PRole_descriptor_;
}

const PRole& PRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

PRole* PRole::default_instance_ = NULL;

PRole* PRole::New() const {
  return new PRole;
}

void PRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_LONGLONG(0);
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    level_ = 0;
    viplvl_ = 0;
    coin_ = 0;
    rmb_ = 0;
    stamina_ = 0;
    exp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ishavemail_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roleName;
        break;
      }

      // required string roleName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vipLvl;
        break;
      }

      // required int32 vipLvl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplvl_)));
          set_has_viplvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_coin;
        break;
      }

      // required int32 coin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rmb;
        break;
      }

      // required int32 rmb = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_stamina;
        break;
      }

      // required int32 stamina = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stamina_)));
          set_has_stamina();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_exp;
        break;
      }

      // required int32 exp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isHaveMail;
        break;
      }

      // required bool isHaveMail = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isHaveMail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishavemail_)));
          set_has_ishavemail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleid(), output);
  }

  // required string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // required int32 vipLvl = 4;
  if (has_viplvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->viplvl(), output);
  }

  // required int32 coin = 5;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->coin(), output);
  }

  // required int32 rmb = 6;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rmb(), output);
  }

  // required int32 stamina = 7;
  if (has_stamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->stamina(), output);
  }

  // required int32 exp = 8;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->exp(), output);
  }

  // required bool isHaveMail = 9;
  if (has_ishavemail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->ishavemail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleid(), target);
  }

  // required string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolename(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // required int32 vipLvl = 4;
  if (has_viplvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->viplvl(), target);
  }

  // required int32 coin = 5;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->coin(), target);
  }

  // required int32 rmb = 6;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rmb(), target);
  }

  // required int32 stamina = 7;
  if (has_stamina()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->stamina(), target);
  }

  // required int32 exp = 8;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->exp(), target);
  }

  // required bool isHaveMail = 9;
  if (has_ishavemail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->ishavemail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleid());
    }

    // required string roleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 vipLvl = 4;
    if (has_viplvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplvl());
    }

    // required int32 coin = 5;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }

    // required int32 rmb = 6;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rmb());
    }

    // required int32 stamina = 7;
    if (has_stamina()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stamina());
    }

    // required int32 exp = 8;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool isHaveMail = 9;
    if (has_ishavemail()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PRole::MergeFrom(const PRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_viplvl()) {
      set_viplvl(from.viplvl());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
    if (from.has_stamina()) {
      set_stamina(from.stamina());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ishavemail()) {
      set_ishavemail(from.ishavemail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PRole::CopyFrom(const PRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRole::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void PRole::Swap(PRole* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(level_, other->level_);
    std::swap(viplvl_, other->viplvl_);
    std::swap(coin_, other->coin_);
    std::swap(rmb_, other->rmb_);
    std::swap(stamina_, other->stamina_);
    std::swap(exp_, other->exp_);
    std::swap(ishavemail_, other->ishavemail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PRole_descriptor_;
  metadata.reflection = PRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PUpRole::kFieldTypeFieldNumber;
const int PUpRole::kAddValueFieldNumber;
const int PUpRole::kFinalValueFieldNumber;
const int PUpRole::kItemTypeFieldNumber;
const int PUpRole::kUpdatePkIdFieldNumber;
#endif  // !_MSC_VER

PUpRole::PUpRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PUpRole::InitAsDefaultInstance() {
}

PUpRole::PUpRole(const PUpRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PUpRole::SharedCtor() {
  _cached_size_ = 0;
  fieldtype_ = 0;
  addvalue_ = 0;
  finalvalue_ = 0;
  itemtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  updatepkid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PUpRole::~PUpRole() {
  SharedDtor();
}

void PUpRole::SharedDtor() {
  if (itemtype_ != &::google::protobuf::internal::kEmptyString) {
    delete itemtype_;
  }
  if (this != default_instance_) {
  }
}

void PUpRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PUpRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PUpRole_descriptor_;
}

const PUpRole& PUpRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

PUpRole* PUpRole::default_instance_ = NULL;

PUpRole* PUpRole::New() const {
  return new PUpRole;
}

void PUpRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fieldtype_ = 0;
    addvalue_ = 0;
    finalvalue_ = 0;
    if (has_itemtype()) {
      if (itemtype_ != &::google::protobuf::internal::kEmptyString) {
        itemtype_->clear();
      }
    }
    updatepkid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PUpRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fieldType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fieldtype_)));
          set_has_fieldtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_addValue;
        break;
      }

      // required int32 addValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addvalue_)));
          set_has_addvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_finalValue;
        break;
      }

      // required int32 finalValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finalValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finalvalue_)));
          set_has_finalvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_itemType;
        break;
      }

      // required string itemType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->itemtype().data(), this->itemtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_updatePkId;
        break;
      }

      // required int64 updatePkId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updatePkId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatepkid_)));
          set_has_updatepkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PUpRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 fieldType = 1;
  if (has_fieldtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fieldtype(), output);
  }

  // required int32 addValue = 2;
  if (has_addvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->addvalue(), output);
  }

  // required int32 finalValue = 3;
  if (has_finalvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->finalvalue(), output);
  }

  // required string itemType = 4;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemtype().data(), this->itemtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->itemtype(), output);
  }

  // required int64 updatePkId = 5;
  if (has_updatepkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->updatepkid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PUpRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 fieldType = 1;
  if (has_fieldtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fieldtype(), target);
  }

  // required int32 addValue = 2;
  if (has_addvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->addvalue(), target);
  }

  // required int32 finalValue = 3;
  if (has_finalvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->finalvalue(), target);
  }

  // required string itemType = 4;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemtype().data(), this->itemtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->itemtype(), target);
  }

  // required int64 updatePkId = 5;
  if (has_updatepkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->updatepkid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PUpRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fieldType = 1;
    if (has_fieldtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fieldtype());
    }

    // required int32 addValue = 2;
    if (has_addvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addvalue());
    }

    // required int32 finalValue = 3;
    if (has_finalvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finalvalue());
    }

    // required string itemType = 4;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemtype());
    }

    // required int64 updatePkId = 5;
    if (has_updatepkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatepkid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PUpRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PUpRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PUpRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PUpRole::MergeFrom(const PUpRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fieldtype()) {
      set_fieldtype(from.fieldtype());
    }
    if (from.has_addvalue()) {
      set_addvalue(from.addvalue());
    }
    if (from.has_finalvalue()) {
      set_finalvalue(from.finalvalue());
    }
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_updatepkid()) {
      set_updatepkid(from.updatepkid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PUpRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PUpRole::CopyFrom(const PUpRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PUpRole::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PUpRole::Swap(PUpRole* other) {
  if (other != this) {
    std::swap(fieldtype_, other->fieldtype_);
    std::swap(addvalue_, other->addvalue_);
    std::swap(finalvalue_, other->finalvalue_);
    std::swap(itemtype_, other->itemtype_);
    std::swap(updatepkid_, other->updatepkid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PUpRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PUpRole_descriptor_;
  metadata.reflection = PUpRole_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
