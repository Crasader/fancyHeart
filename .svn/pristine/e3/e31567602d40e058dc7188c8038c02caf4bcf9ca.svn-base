//
//  FightScene.cpp
//  fancyHeart
//
//  Created by 秦亮亮 on 14-5-5.
//
//

#include "FightScene.h"
#include "HomeScene.h"

Scene* FightScene::createScene(){
	auto scene = Scene::create();
    auto layer = FightScene::create();
    scene->addChild(layer,0,0);
	return scene;
}

FightScene* FightScene::create()
{
    FightScene* pRet=new FightScene();
    if (pRet && pRet->init("publish/fight/fight.ExportJson")) {
        pRet->autorelease();
        return pRet;
    }
    CC_SAFE_DELETE(pRet);
    return nullptr;
}

bool FightScene::init(const char* fileName){


    if(!BaseUI::init(fileName)){
        return false;
    }
    this->heroNode=this->layout->getChildByName("hero");
    this->effectNode=Widget::create();//this->layout->getChildByName("effect");
    this->addChild(effectNode,6);

    Size dSize(1136,640);
    Size size=Director::getInstance()->getWinSize();

    this->bg=Sprite::create("fightBg.png");
    this->addChild(bg,-3);
    this->bg->setPosition(Vec2(size.width/2,size.height/2));
    
    float scale=fmin(size.width/dSize.width,size.height/dSize.height);
  
    auto top=this->layout->getChildByName("top");
    top->setScale(scale);
    top->setPosition(Vec2(0,size.height*(1-scale)));
    
    this->skillNode=this->layout->getChildByName("skill");
    this->skillNode->setScale(scale);

////    this->bossInfo=top->getChildByName("bossBg");
////    this->bossInfo->setVisible(false);
    for(int i=0;i<5;i++){
        Widget* skillIcon=skillNode->getChildByName("skill"+Value(i).asString());
        this->skillIcons.pushBack(skillIcon);
        skillIcon->setVisible(false);
        Widget* bean=skillNode->getChildByName("bean"+Value(i).asString());
        bean->setVisible(false);
        this->beans.pushBack(bean);
        Clip* clip=Clip::create("effect/battle_Flashing box.plist",5);
        this->skillNode->addChild(clip);
        clip->setPosition(skillIcon->getPosition());
        clip->setVisible(false);
        clip->setScale(scale);
        this->skillRims.pushBack(clip);
        
    }
    
    ui::Button* btn_pause=static_cast<ui::Button*>(top->getChildByName("btn_pause"));
    ui::Button* btn_auto=static_cast<ui::Button*>(skillNode->getChildByName("btn_auto"));
    btn_auto->addTouchEventListener(CC_CALLBACK_2(FightScene::touchEvent, this));
    btn_pause->addTouchEventListener(CC_CALLBACK_2(FightScene::touchEvent,this));

    auto listener1 = EventListenerTouchOneByOne::create(); //创建一个触摸监听
    listener1->setSwallowTouches(false); //设置是否想下传递触摸
    listener1->onTouchBegan = [this](Touch* touch, Event* event){ return true;};//[]中间的是传入的参数
    listener1->onTouchEnded = [this](Touch* touch, Event* event){
        Vec2 start=touch->getStartLocation();
        Vec2 end=touch->getLocation();
        for(int i=0;i<skillIcons.size();i++){
            Widget* skillIcon=skillIcons.at(i);
            if(skillIcon->getBoundingBox().containsPoint(end)){
                this->skillRims.at(i)->stopAllActions();
                this->skillRims.at(i)->setVisible(false);
                
                FightMgr::getInstance()->getRole()->currentSkill=FightMgr::getInstance()->getRole()->getSkillByID(-skillIcon->getTag());
                FightMgr::getInstance()->getRole()->startAttack();
                FightMgr::getInstance()->getRole()->data->mp-=XSkill::record(Value(FightMgr::getInstance()->getRole()->currentSkill->skillID))->getMp()*20;
                
                break;
            }
        }
        int beanNum=FightMgr::getInstance()->getRole()->data->mp;
        for (int i=0; i<5; i++) {
            if(beanNum/20<i+1){
                this->beans.at(i)->setVisible(false);
            }
        }
        
        if(fabs(end.x-start.x) == 0) return;
        //滑动捡豆子
        Vector<Node*> childs=this->effectNode->getChildren();
        for(auto bean : childs){
            bean->stopAllActions();
            auto cf=CallFuncN::create( CC_CALLBACK_1(FightScene::pickBean, this));
            Spawn* sp=Spawn::create(MoveTo::create(0.3, Vec2(100, 100)),Sequence::create(DelayTime::create(0.2),ScaleTo::create(0.1,0),NULL),NULL);
            bean->runAction(Sequence::create(sp,cf, NULL));
        }
    };
    _eventDispatcher->addEventListenerWithFixedPriority(listener1, -100);

    return true;
}

void FightScene::onEnter()
{
    BaseUI::onEnter();
}

void FightScene::resetProgress()
{
    
}

void FightScene::bounce(MFighter *mf)
{
    
}

void FightScene::pickBean(Node* pSender)
{
    pSender->removeFromParent();
    
    int mp=++FightMgr::getInstance()->getRole()->data->mp;
    int beanNum=mp/20;
    for(int i=0;i<this->beans.size();i++){
        Widget* bean=beans.at(i);
        if(bean->isVisible() || beanNum<i) continue;
        Clip* clip=Clip::create("effect/bean_DDSZ.plist", 12);
        this->skillNode->addChild(clip);
        clip->setPosition(bean->getPosition());
        float duration=clip->play();
        bean->runAction(Sequence::create(DelayTime::create(duration),Show::create(), NULL));
    }
   
    for(int i=0;i<skillIcons.size();i++){
        Skill* skill=FightMgr::getInstance()->getRole()->getSkillByID(-skillIcons.at(i)->getTag());
        if(!skill) break;
        if(XSkill::record(Value(skill->skillID))->getMp()<=beanNum){
            this->skillRims.at(i)->setVisible(true);
            this->skillRims.at(i)->play(true);
        }
    }
}

void FightScene::skillColdDown(int skillID)
{
    skillIcons.at(0)->setVisible(true);
    this->skillRims.at(0)->setVisible(true);
    this->skillRims.at(0)->play(true);
    
}

void FightScene::nextBattle()
{
    this->bg->setDisplayFrame(Sprite::create("ceshi.png")->displayFrame());
    FightMgr::getInstance()->npcs.clear();
}

bool FightScene::onTouchBegan(Touch *touch, Event *unusedEvent)
{
    Layout::onTouchBegan(touch, unusedEvent);
    return true;
}

void FightScene::onTouchEnded(Touch *touch, Event *unusedEvent)
{
    Widget::onTouchEnded(touch, unusedEvent);
    
    Vec2 start=touch->getStartLocation();
    Vec2 end=touch->getLocation();
    if(fabs(end.x-start.x) == 0) return;
    Vector<Node*> childs=this->effectNode->getChildren();
    
    for(auto bean : childs){
        bean->stopAllActions();
        bean->runAction(MoveTo::create(0.2, Vec2(100,100)));
    }
    
}

void FightScene::touchEvent(cocos2d::Ref *pSender, Widget::TouchEventType type)
{
    Widget* sender=dynamic_cast<Widget*>(pSender);
    log("sender:%d",sender->getTag());
    switch (type)
    {
        case TouchEventType::BEGAN:
            break;
        case TouchEventType::MOVED:
            break;
        case TouchEventType::ENDED:
            if(sender->getTag()==10125){ //pause
                FightMgr::getInstance()->clear();
                Director::getInstance()->replaceScene(HomeScene::createScene());
            }
            if(sender->getTag()==10145){ //auto
                
            }
            break;
        case TouchEventType::CANCELED:
            break;
        default:
            break;
    }
}

void FightScene::onMessage(Socket* socket, const NetMsg& data)
{
    
}

void FightScene::onExit()
{
    FightMgr::getInstance()->clear();
    _eventDispatcher->removeAllEventListeners();
    Node::onExit();
}