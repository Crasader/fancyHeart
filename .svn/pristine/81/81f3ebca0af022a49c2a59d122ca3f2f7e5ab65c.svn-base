package com.doteyplay.game.domain.role;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.doteyplay.core.dbcs.DBCS;
import com.doteyplay.game.CommonConstants;
import com.doteyplay.game.config.template.SpriteDataObject;
import com.doteyplay.game.constants.IdType;
import com.doteyplay.game.constants.pet.PetConstants;
import com.doteyplay.game.constants.sprite.SpriteQualityType;
import com.doteyplay.game.domain.common.IdGenerator;
import com.doteyplay.game.domain.gamebean.PetBean;
import com.doteyplay.game.domain.gamebean.SkillBean;
import com.doteyplay.game.domain.pet.Pet;
import com.doteyplay.game.persistence.serverdata.pet.IPetBeanDao;
import com.doteyplay.game.persistence.serverdata.skill.ISkillBeanDao;
import com.doteyplay.game.util.excel.TemplateService;

public class RolePetManager
{
	// 角色拥有的全部宠物
	private Map<Long, Pet> petMap = new HashMap<Long, Pet>();
	
	/**
	 * 当前宠物组Map,key:宠物Id,value:宠物
	 */
	private Map<Long,Pet> curPetMap = new HashMap<Long,Pet>();

	private Role role;

	public RolePetManager(Role role)
	{
		this.role = role;
	
	}

	public void init()
	{
		IPetBeanDao petBeanDao = DBCS.getExector(IPetBeanDao.class);
		List<PetBean> petBeanList = petBeanDao.selectPetBeanListByRoleId(role
				.getRoleId());

		if (petBeanList == null || petBeanList.size() <= 0)
		{
			//临时默认值
			this.addPet(role.getRoleBean().getSpriteId());
		} else
		{
			ISkillBeanDao skillBeanDao = DBCS.getExector(ISkillBeanDao.class);
			List<SkillBean> skillBeanList = skillBeanDao
					.selectSkillBeanList(this.role.getRoleId());

			Map<Long, List<SkillBean>> tmpMap = new HashMap<Long, List<SkillBean>>();
			if (skillBeanList != null)
			{
				for (SkillBean skillBean : skillBeanList)
				{
					List<SkillBean> tmpList = tmpMap.get(skillBean
							.getPetId());
					if (tmpList == null)
					{
						tmpList = new ArrayList<SkillBean>();
						tmpMap.put(skillBean.getPetId(), tmpList);
					}
					tmpList.add(skillBean);
				}
			}

			for (PetBean bean : petBeanList)
			{
				Pet pet = new Pet(bean, this.role, tmpMap.get(bean.getId()));
				pet.init();
				addCurPetMap(pet);
				petMap.put(pet.getId(), pet);
			}
		}

	}

	public Map<Long, Pet> getPetMap()
	{
		return petMap;
	}

	public void setPetMap(Map<Long, Pet> petMap)
	{
		this.petMap = petMap;
	}

	public Role getRole()
	{
		return role;
	}

	public void setRole(Role role)
	{
		this.role = role;
	}

	public Collection<Pet> getCurPetList()
	{
		return curPetMap.values();
	}


	public Pet getPetBySriteId(int petSpriteId)
	{
		for (Pet pet : petMap.values())
			if (pet.getSpriteDataObject().getId() == petSpriteId)
				return pet;
		return null;
	}

	public Pet addPet(int petSpriteId)
	{
		if (getPetBySriteId(petSpriteId) != null)
			return null;

		SpriteDataObject petSpriteData = TemplateService.getInstance().get(petSpriteId, SpriteDataObject.class);
		if (petSpriteData == null)
			return null;

		PetBean petBean = new PetBean();
		petBean.setAreaId(role.getRoleBean().getAreaId());
		petBean.setId(IdGenerator.getInstance().getId(IdType.PET_ID,
				petBean.getAreaId()));
		petBean.setLevel(1);
		petBean.setStar(petSpriteData.getInitStar());
		petBean.setRoleId(this.role.getRoleId());
		petBean.setSpriteId(petSpriteId);
		
		if(petSpriteData.getIsHero() == CommonConstants.TRUE){
			petBean.setGroupId(1);
			petBean.setQuality(SpriteQualityType.QUALITY_9.ordinal());
		}else{
			petBean.setGroupId(0);
		}

		IPetBeanDao petBeanDao = DBCS.getExector(IPetBeanDao.class);
		petBeanDao.insertPetBean(petBean);

		Pet pet = new Pet(petBean, this.role, null);
		pet.init();
		
		this.petMap.put(pet.getId(), pet);
		addCurPetMap(pet);
		return pet;
	}
	
	private void addCurPetMap(Pet pet){
		//当前宠物列表中没有加上.
		int groupId = pet.getBean().getGroupId();
		if(groupId>0){
				if(!this.curPetMap.containsKey(pet.getId())){
					this.curPetMap.put(pet.getId(), pet);
				}
			
		}
	}
	
	
	
	
	public void onLeaveGame()
	{
		for(Pet pet:this.petMap.values())
			pet.onLeaveGame();
	}
	
	
	/**
	 * 添加当前出战的宠物的经验.
	 * @param petExp
	 */
	public synchronized void addCurPetListExp(int petExp){
		for (Pet pet : this.curPetMap.values()) {
			pet.addExp(petExp);
		
		}
	}
	
	/**
	 * 将英雄加入组内.
	 * 需要验证,英雄本身所在的组的情况.
	 * @param groupId
	 * @param pet
	 * @return 添加失败.因为原来就有此组.
	 */
	public boolean addPetToGroup(Pet pet){
		int group = pet.getBean().getGroupId();
		if(group>0){
			return false;
		}else{
			pet.getBean().setGroupId(1);
			this.addCurPetMap(pet);
			return true;
		}
		
	}
	/**
	 * 从某组中清理掉,原有的宠物.并清理掉宠物的标识.
	 * @param groupId
	 * @param pet
	 * @return
	 */
	public boolean removePetFromGroup(int groupId,Pet pet){
		int group = pet.getBean().getGroupId();
		if(group>0){
			this.curPetMap.remove(pet.getId());
			pet.getBean().setGroupId(0);
			return true;
		}else{
			return false;
		}
		
	}

	public Map<Long, Pet> getCurPetMap() {
		return curPetMap;
	}
	
	public synchronized void resetPetGroup(Collection<Long> petIds){
		//1.清理掉原有的组信息.
		for (Pet pet :curPetMap.values()) {
				pet.getBean().setGroupId(0);
		}
		//2.清理掉map内容.
		curPetMap.clear();
		//3.重新生成组信息.并附值,添加到map中.
		if(petIds==null){
			return;
		}
		
		for (Long petId : petIds) {
			Pet pet = petMap.get(petId);
			if(pet!=null){
				pet.getBean().setGroupId(1);
				this.addCurPetMap(pet);
			}
		}
	}
	/**
	 * 1.拼串
	 * @param groupIdSet
	 * @return
	 */
	private static String getGroupStr(Set<Integer> groupIdSet){
		List<Integer> list = new ArrayList<Integer>();
		for (Integer integer : groupIdSet) {
			list.add(integer);
		}
		Collections.sort(list);
		String str= "";
		for (Integer integer : list) {
			str+=integer+",";
		}
		if(!str.equals("")){
			str=str.substring(0, str.length()-1);
		}
		return str;
	}
	
}
