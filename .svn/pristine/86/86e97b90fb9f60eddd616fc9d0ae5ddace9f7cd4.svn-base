//
//  BattleScene.cpp
//  fancyHeart
//
//  Created by 秦亮亮 on 14-5-5.
//
//

#include "BattleScene.h"
#include "HomeScene.h"

Scene* BattleScene::createScene(){
	auto scene = Scene::create();
    auto layer = BattleScene::create();
    scene->addChild(layer,0,0);
	return scene;
}

BattleScene* BattleScene::create()
{
    BattleScene* pRet=new BattleScene();
    if (pRet && pRet->init("publish/fight/fight.ExportJson")) {
        pRet->autorelease();
        return pRet;
    }
    CC_SAFE_DELETE(pRet);
    return nullptr;
}

bool BattleScene::init(const char* fileName){

    if(!BaseUI::init(fileName)){
        return false;
    }
    this->layout->setOpacity(255);

    this->setSize(Director::getInstance()->getWinSize());
    this->heroNode=Widget::create();//this->layout->getChildByName("hero");
    this->layout->addChild(heroNode,-1);
    this->effectNode=Widget::create();
    this->addChild(effectNode,1);

    Size dSize(1136,640);
    Size size=Director::getInstance()->getWinSize();
    this->bg=Sprite::create("fightBg.png");
    this->layout->addChild(bg,-2);
    this->bg->setPosition(Vec2(size.width/2,size.height/2));
    
    float scale=fmin(size.width/dSize.width,size.height/dSize.height);
  
    this->top=(Widget*)this->layout->getChildByName("top");
    top->setScale(scale);
    top->setPosition(Vec2(0,size.height-(dSize.height-top->getPositionY())*(scale)));

    this->skillNode=(Widget*)this->layout->getChildByName("skill");
    this->skillNode->setScale(scale);

    this->bossInfo=(Widget*)top->getChildByName("boss");
    this->bossInfo->setVisible(false);

    ui::Button* btn_pause=static_cast<ui::Button*>(top->getChildByName("btn_pause"));
    ui::Button* btn_auto=static_cast<ui::Button*>(skillNode->getChildByName("btn_auto"));
    btn_pause->addTouchEventListener(CC_CALLBACK_2(BattleScene::touchButtonEvent,this));
    btn_auto->addTouchEventListener(CC_CALLBACK_2(BattleScene::touchButtonEvent, this));
    
    auto listener1 = EventListenerTouchOneByOne::create(); //创建一个触摸监听
    listener1->setSwallowTouches(false); //设置是否想下传递触摸
    listener1->onTouchBegan = CC_CALLBACK_2(BattleScene::onTouchBegan, this);
    listener1->onTouchEnded = CC_CALLBACK_2(BattleScene::onTouchEnded, this);
    _eventDispatcher->addEventListenerWithSceneGraphPriority(listener1, this->effectNode);
    return true;
}

void BattleScene::onEnter()
{
    BaseUI::onEnter();
    this->schedule(SEL_SCHEDULE(&BattleScene::tick), 1);
}

void BattleScene::initSkill(std::vector<int> skills)
{
    skills={15201,15301,15401,15501,15601};
    Widget* skillIcons=(Widget*)this->skillNode->getChildByName("skillIcon");
    std::vector<Vector<ImageView*>> vec;
    //普通攻击特殊处理
    for(int i=0;i<skills.size();i++){
        int skillID=skills.at(i);
        ImageView* rim=(ImageView*)skillIcons->getChildByName("skill"+Value(i).asString());
        rim->setVisible(true);
        SkillIcon* icon=SkillIcon::create(rim, skillID);
        skillIcons->addChild(icon,-1);
        icon->setIsOK(false);
        this->roleSkills.pushBack(icon);
    }
}

void BattleScene::resetProgress()
{
    
}

void BattleScene::bounceTo(FighterMgr *npc)
{
    
}

void BattleScene::pickBean(Node* pSender)
{
    pSender->removeFromParent();
    /*
    int mp=++BattleMgr::getInstance()->roleMp;
    int beanNum=mp/BEAN_NUM;
    for(int i=0;i<this->beans.size();i++){
        Widget* bean=beans.at(i);
        if(bean->isVisible() || beanNum<i) continue;
        Clip* clip=Clip::create("effect/bean_DDSZ.plist","bean_DDSZ", 12);
        this->skillNode->addChild(clip);
        clip->setPosition(bean->getPosition());
        float duration=clip->play();
        bean->runAction(Sequence::create(DelayTime::create(duration),Show::create(), NULL));
    }
   
    for(int i=0;i<roleSkills.size();i++){
        int skillID=roleSkills.at(i)->getTag();
        if(XSkill::record(Value(skillID))->getMp()<=beanNum){
            this->roleSkills.at(i)->showRim();
        }
    }
     */
}

void BattleScene::tick(float dt)
{
    this->duration--;
    std::string str=Value(duration/60).asString()+":"+Value(duration%60).asString();
    Text* cdLabel=static_cast<Text*>(this->top->getChildByName("cdLabel"));
    cdLabel->setString(str);
    if(this->duration<=0){
        BattleMgr::getInstance()->overTime();
    }
}

void BattleScene::setNpcIcon(int num,bool isKill)
{
    for(int i=0;i<num;i++){
//        Widget* icon=(Widget*)this->top->getChildByName("npc"+Value(i).asString());
//        if(isKill){
//            icon->setVisible(i>num);
//        }else{
//            icon->setVisible(i<=num);
//        }
    }
}

bool BattleScene::onTouchBegan(Touch *touch, Event *unusedEvent)
{
    Layout::onTouchBegan(touch, unusedEvent);
    return true;
}

void BattleScene::onTouchEnded(Touch *touch, Event *unusedEvent)
{
    Vec2 start=touch->getStartLocation();
    Vec2 end=touch->getLocation();
    
    this->touchSkill(touch,unusedEvent);
    
    //滑动捡豆子
    if(fabs(end.x-start.x) == 0) return;
    Vector<Node*> childs=this->effectNode->getChildren();
    for(auto bean : childs){
        bean->stopAllActions();
        auto cf=CallFuncN::create( CC_CALLBACK_1(BattleScene::pickBean, this));
        Spawn* sp=Spawn::create(MoveTo::create(0.3, Vec2(100, 100)),Sequence::create(DelayTime::create(0.2),ScaleTo::create(0.1,0),NULL),NULL);
        bean->runAction(Sequence::create(sp,cf, NULL));
    }
}

void BattleScene::touchSkill(Touch* touch,Event* unusedEvent)
{
    Vec2 end=touch->getLocation();
    end=this->skillNode->convertToNodeSpace(end);
    if(BattleMgr::getInstance()->isOver){
        return;
    }
    // 使用技能
    /*
    for(int i=0;i<skillIcons.size();i++){
        if(skillRims.at(i)->isVisible()==false){
            continue;
        }
        Widget* skillIcon=skillIcons.at(i);
        if(skillIcon->getBoundingBox().containsPoint(end)){
            this->skillRims.at(i)->stopAllActions();
//            this->skillRims.at(i)->setVisible(false);
            BattleMgr::getInstance()->skillAttack(-skillIcon->getTag());
            
            break;
        }
    }
     */
    int beanNum=BattleMgr::getInstance()->roleMp;
    for (int i=4; i>-1; i--) {
        if(beanNum/BEAN_NUM<i-1){
            this->beans.at(i)->setVisible(false);
        }
    }
}

void BattleScene::touchButtonEvent(cocos2d::Ref *pSender, Widget::TouchEventType type)
{
    if(type!=TouchEventType::ENDED) return;
    
    Button* sender=dynamic_cast<Button*>(pSender);
    log("tag:%d",sender->getTag());
    if(sender->getTag()==10125){ //pause
//        BattleMgr::getInstance()->clear();
//        Director::getInstance()->replaceScene(HomeScene::createScene());
        this->unschedule(SEL_SCHEDULE(&BattleScene::tick));
    }
    if(sender->getTag()==10145){ //auto
                
    }
}

void BattleScene::initNetEvent()
{
    auto listener = EventListenerCustom::create(NET_MESSAGE, [=](EventCustom* event){
        NetMsg* msg = static_cast<NetMsg*>(event->getUserData());
        switch (msg->msgId)
        {
            case C_FIGHTRESULT:
            {
                PResultResp pResultResp;
                pResultResp.ParseFromArray(msg->bytes, msg->len);
                GateResult* gateResult=GateResult::create(this, pResultResp);
                gateResult->show();
                break;
            }
                
            default:
                break;
        }
    });
    Director::getInstance()->getEventDispatcher()->addEventListenerWithSceneGraphPriority(listener, this);
}

void BattleScene::onExit()
{
    BattleMgr::getInstance()->clear();
    Node::onExit();
    SpriteFrameCache::getInstance()->removeSpriteFrames();
}