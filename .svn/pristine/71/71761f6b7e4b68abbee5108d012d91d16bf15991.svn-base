#include "LoginScene.h"
#include "external/json/document.h"
#include "extensions/cocos-ext.h"
#include "ui/CocosGUI.h"
#include "cocostudio/CocoStudio.h"
#include "ShaderNode.h"


Scene* LoginScene::createScene()
{
    auto scene = Scene::create();
    auto layer = LoginScene::create();
    scene->addChild(layer);
    return scene;
}

LoginScene* LoginScene::create()
{
    LoginScene* loginScene=new LoginScene();
    if (loginScene && loginScene->init("publish/login/login.ExportJson")) {
        loginScene->autorelease();
        return loginScene;
    }
    CC_SAFE_DELETE(loginScene);
    return nullptr;
}

bool LoginScene::init(std::string fileName)
{
    if(!BaseUI::init(fileName))
    {
        return false;
    }
    Widget* choosePanel = static_cast<Widget*>(layout->getChildByName("choosePanel"));
    ScrollView* scrollView=static_cast<ui::ScrollView*>(choosePanel->getChildByName("scrollView"));
    Widget* lgintBtn=(Widget*)scrollView->getChildByName("loginBtn");
    choosePanel->setVisible(false);
    Size sSize=Director::getInstance()->getOpenGLView()->getFrameSize();
    Size winsize=Director::getInstance()->getWinSize();
    return true;
}

void LoginScene::onEnter()
{
    BaseUI::onEnter();
    
    this->isEnter = false;
    this->initGame();
}

void LoginScene::resetUI()
{
    static_cast<Widget*>(layout->getChildByName("firstPanel"))->setVisible(false);
    Widget* choosePanel = static_cast<Widget*>(layout->getChildByName("choosePanel"));
    ImageView* icon = static_cast<ImageView*>(choosePanel->getChildByName("icon"));
    ScrollView* scrollView=static_cast<ui::ScrollView*>(choosePanel->getChildByName("scrollView"));
    ScrollView* leftScrollView = static_cast<ScrollView*>(choosePanel->getChildByName("leftScrollView"));
    Text* preLogin = static_cast<Text*>(choosePanel->getChildByName("preLogin"));
//    Button* lgintBtn=static_cast<Button*>(scrollView->getChildByName("loginBtn"));
    Button* lgintBtn=(Button*)scrollView->getChildByName("loginBtn");
    Button* serverBtn=(Button*)leftScrollView->getChildByName("serverBtn");
    Size size=Size(scrollView->getInnerContainerSize().width,(lgintBtn->getContentSize().height+50)*sData["areaList"].Size()/2);
    scrollView->setInnerContainerSize(size);
    Size sizeSever = Size(leftScrollView->getInnerContainerSize().width,(serverBtn->getContentSize().height+15)*6);//数量先写死，以后根据服务器给的数据数量添加
    leftScrollView->setInnerContainerSize(sizeSever);
    
    //清除容器
    this->serverItemLists.clear();
    this->serverList.clear();
    
    std::vector<Button*> buttons;
    
    //添加服务器列表(此处以后要根据服务器给的数据进行添加，此处写死先)
    for(int k = 0;k<1;k++){
        Button* itemBtn = dynamic_cast<Button*>(serverBtn->clone());
        //将选服按钮存储起来
        this->serverList.pushBack(itemBtn);
        itemBtn->setTag(k);
        itemBtn->setTitleText("001—01"+Value(k+1).asString()+"区");
        
        buttons.push_back(itemBtn);
//        itemBtn->setTitleColor(Color3B(0, 0, 0));//颜色设置为黑色
        leftScrollView->addChild(itemBtn);
        
        Size sSize1=leftScrollView->getInnerContainerSize();
        Size itemSize1=itemBtn->getContentSize();
        
        float x=(sSize1.width-itemSize1.width)/2.0+itemSize1.width/2;
        float y=sSize1.height-((itemSize1.height)/2)*(k+1)-40*k;
        itemBtn->setPosition(Vec2(x,y));
        itemBtn->addTouchEventListener(CC_CALLBACK_2(LoginScene::touchServerListEvent,this));
    }
    tabBar=TabBar::create(buttons);
    tabBar->retain();
    tabBar->setIndex(0);//暂时先这么写，到时候记录看上一次选了哪个区，再打开的时候默认停留在那一区
    
    //根据服务器给的数据添加单个服务器下多个选项
    for (int i = 0;i<this->sData["areaList"].Size();i++)
    {
        Button* newItem = dynamic_cast<Button*>(lgintBtn->clone());
        //将选服按钮存储起来
        this->serverItemLists.pushBack(newItem);
        newItem->setTag(i);
        newItem->setTitleText(sData["areaList"][i]["name"].GetString());
//        newItem->setTitleColor(Color3B(0, 0, 0));//颜色设置为黑色
        //newItem->setAnchorPoint(Vec2(0,0));
//        newItem->setVisible(true);//
        
        scrollView->addChild(newItem);
        
        Size sSize=scrollView->getInnerContainerSize();
        Size itemSize=newItem->getContentSize();
        
        float x=(sSize.width/2-itemSize.width)/2.0+sSize.width/2*(i%2)+113;
        float y=sSize.height-(itemSize.height+22)*(i/2+1);
        newItem->setPosition(Vec2(x,y));
        newItem->addTouchEventListener(CC_CALLBACK_2(LoginScene::touchServerEvent,this));
    }
    
    
//    this->setSeverItemsMouseEnable(true);
    choosePanel->setVisible(true);//
    lgintBtn->removeFromParent();//移除舞台上的单个按钮
    serverBtn->removeFromParent();
    
    
    //如果没记录过账号和密码，将刚刚注册的登录账号和密码记录下来
    //将注册界面隐藏
    auto registerBottom=static_cast<Widget*>(layout->getChildByName("registerBottom"));
    registerBottom->setVisible(false);
    
    //看是否上次登录的服务器名称被记录，如果记录则显示上次被登录的服务器名称
    string serverName =UserDefault::getInstance()->getStringForKey("serverName");
    preLogin->setText(serverName != ""?serverName:"");
    icon->setVisible(serverName != ""?true:false);
    //设置状态
//    icon->loadTexture();
    
    //添加一个字符串数据到指定key
    UserDefault::getInstance()->setStringForKey("account",accountInput->getStringValue());
    UserDefault::getInstance()->setStringForKey("password",passwordInput->getStringValue());
    //提交,生成xml文件
    UserDefault::getInstance()->flush();

}

//init 游戏服务器 服务器认证
void LoginScene::initGame()
{
    //DeviceInfo d;
    //log("uuid:%s",d.getUUID());
    //std::string str="account="+Value(d.getUUID()).asString()+"&password="+d.getUUID();
    
//    std::string str="account=shuzl&password=123";
//    WebHttp::getInstance()->send(HTTP_URL, CC_CALLBACK_1(LoginScene::initGameCallback, this),str.c_str());
    Widget* firstPanel = static_cast<Widget*>(layout->getChildByName("firstPanel"));
    Button* lgintBtn=static_cast<Button*>(firstPanel->getChildByName("loginBtn"));
    Widget* panel = static_cast<Widget*>(firstPanel->getChildByName("panel"));
    Button* selectBtn = static_cast<Button*>(panel->getChildByName("selectBtn"));
    Button* enterBtn = static_cast<Button*>(firstPanel->getChildByName("enterBtn"));
    Text* serverName = static_cast<Text*>(panel->getChildByName("serverName"));
    lgintBtn->addTouchEventListener(CC_CALLBACK_2(LoginScene::touchEvent,this));
    selectBtn->addTouchEventListener(CC_CALLBACK_2(LoginScene::touchEvent,this));
    enterBtn->addTouchEventListener(CC_CALLBACK_2(LoginScene::touchEvent,this));
    firstPanel->setVisible(false);//true
    
    //用以判断是否记录账号和密码,没有则弹出弹窗，填写用户名及密码，有则直接登录进入选择服务器界面
    auto registerBottom=static_cast<Widget*>(layout->getChildByName("registerBottom"));
    auto accountStr =UserDefault::getInstance()->getStringForKey("account");
    auto passwordStr =UserDefault::getInstance()->getStringForKey("password");
    Button* closeBtn = static_cast<Button*>(registerBottom->getChildByName("closeBtn"));
    Text* desLabel = static_cast<Text*>(registerBottom->getChildByName("desLabel"));
    
    registerBottom->setVisible(true);//false
    Button* sureBtn=(Button*)registerBottom->getChildByName("sureBtn");
    accountInput=static_cast<TextField*>(registerBottom->getChildByName("accountInput"));
    passwordInput=static_cast<TextField*>(registerBottom->getChildByName("passwordInput"));
    sureBtn->setTouchEnabled(true);
    sureBtn->addTouchEventListener(CC_CALLBACK_2(LoginScene::touchEvent,this));
    closeBtn->addTouchEventListener(CC_CALLBACK_2(LoginScene::touchEvent,this));
    Label* desLabel1 = static_cast<Label*>(desLabel->getVirtualRenderer());
    desLabel->enableOutline(Color4B::BLACK,1);
    
    if (accountStr != "" && passwordStr != "") {
        accountInput->setText(UserDefault::getInstance()->getStringForKey("account"));
        passwordInput->setText(UserDefault::getInstance()->getStringForKey("password"));
    }else{
        accountInput->setText("");
        passwordInput->setText("");
    }
    //看是否上次登录的服务器名称被记录，如果记录则显示上次被登录的服务器名称
    string serverNames =UserDefault::getInstance()->getStringForKey("serverName");
    serverName->setText(serverNames != ""?serverNames:"");
}

void LoginScene::webSend(std::string str)
{
    WebHttp::getInstance()->send(HTTP_URL, CC_CALLBACK_1(LoginScene::initGameCallback, this),str.c_str());
}

void LoginScene::initGameCallback(std::vector<char> *data)
{
    std::string str(data->begin(),data->end());
    sData.Parse<0>(str.c_str());
    log("loginData:%s",str.c_str());
    if (sData["loginState"].GetInt()!=0) {//先用以后修改
        log("登录认证失败！");
    }else if(sData["areaList"].Size()<1){
        log("服务列表数据长度不够");
    }else{
        if (this->isEnter == true) {//此处以后还要判断是否创建了角色，没有则进入创建角色界面
            this->isEnter = false;
            Manager::getInstance()->socket=new Socket();
            string ip1=UserDefault::getInstance()->getStringForKey("ip");
            string port1=UserDefault::getInstance()->getStringForKey("port");
            Manager::getInstance()->socket->init(ip1, Value(port1).asInt());
            this->setSeverItemsMouseEnable(false);
        }else{
            this->resetUI();
        }
        
    }
}
//设置是否可以点击选择服务器按钮
void LoginScene::setSeverItemsMouseEnable(bool isCan)
{
    for (int i = 0; i<this->serverItemLists.size(); ++i) {
        this->serverItemLists.at(i)->setTouchEnabled(isCan);
    }
}

void LoginScene::onDlgClose(rapidjson::Value &data)
{
    BaseUI::onDlgClose(data);
    std::string btnName=data.GetString();
    log("you click confirm %s",btnName.c_str());
}

void LoginScene::touchEvent(Ref *pSender, Widget::TouchEventType type)
{
    auto button=static_cast<Button*>(pSender);
    if(type!=TouchEventType::ENDED){
        return;
    }
    switch (button->getTag()) {
        case 11203://注册确定按钮
            if (accountInput->getStringValue() != ""  && passwordInput->getStringValue() != "") {
                std::string str="account="+this->accountInput->getStringValue()+"&password="+this->passwordInput->getStringValue();//"account=shuzl&password=123";
                this->webSend(str);
            }
            break;
        case 32138://关闭按钮
//            static_cast<Widget*>(layout->getChildByName("firstPanel"))->setVisible(true);
//            static_cast<Widget*>(layout->getChildByName("registerBottom"))->setVisible(false);
            break;
        case 32552://登录首页中的账号登录按钮
            static_cast<Widget*>(layout->getChildByName("firstPanel"))->setVisible(false);
            static_cast<Widget*>(layout->getChildByName("registerBottom"))->setVisible(true);
            break;
        case 32556://点击选区按钮
            if (accountInput->getStringValue() != ""  && passwordInput->getStringValue() != "") {
                std::string str="account="+this->accountInput->getStringValue()+"&password="+this->passwordInput->getStringValue();//"account=shuzl&password=123";
                this->webSend(str);
            }
//            static_cast<Widget*>(layout->getChildByName("choosePanel"))->setVisible(true);
//            static_cast<Widget*>(layout->getChildByName("firstPanel"))->setVisible(false);
            break;
        case 32554://进入游戏按钮
            this->isEnter = true;
            if (accountInput->getStringValue() != ""  && passwordInput->getStringValue() != "") {
                std::string str="account="+this->accountInput->getStringValue()+"&password="+this->passwordInput->getStringValue();//"account=shuzl&password=123";
                this->webSend(str);
            }
            break;
        default:
            break;
    }
}
//
void LoginScene::touchServerEvent(Ref *pSender, Widget::TouchEventType type)
{
    auto button=static_cast<Button*>(pSender);
    if(type!=TouchEventType::ENDED){
        return;
    }
    Manager::getInstance()->socket=new Socket();
    string ip=this->sData["areaList"][button->getTag()]["ip"].GetString();
    int port=this->sData["areaList"][button->getTag()]["port"].GetInt();
    Manager::getInstance()->socket->init(ip, port);
    this->setSeverItemsMouseEnable(false);
    
    //记录上次登录选择的服务器名称,ip和port
    string serverName = this->sData["areaList"][button->getTag()]["name"].GetString();//
    UserDefault::getInstance()->setStringForKey("serverName",serverName);//
    string ips = this->sData["areaList"][button->getTag()]["ip"].GetString();
    UserDefault::getInstance()->setStringForKey("ip",ips);
    string ports = Value(this->sData["areaList"][button->getTag()]["port"].GetInt()).asString();
    UserDefault::getInstance()->setStringForKey("port",ports);
    
    //提交,生成xml文件
    UserDefault::getInstance()->flush();//
}

void LoginScene::touchServerListEvent(Ref *pSender, Widget::TouchEventType type)
{
    auto button=static_cast<Button*>(pSender);
    if(type!=TouchEventType::ENDED){
        return;
    }
    Widget* choosePanel = static_cast<Widget*>(layout->getChildByName("choosePanel"));
    ScrollView* scrollView=static_cast<ui::ScrollView*>(choosePanel->getChildByName("scrollView"));
    scrollView->setVisible(button->getTag() == 0?true:false);
    tabBar->setIndex(button->getTag());
}

void LoginScene::initNetEvent(){
    auto listener = EventListenerCustom::create(NET_MESSAGE, [=](EventCustom* event){
        NetMsg* msg = static_cast<NetMsg*>(event->getUserData());
        switch (msg->msgId)
        {
            case CONNECT_ERROR:
            {
                
#if COCOS2D_DEBUG
                auto scene=HomeScene::createScene();
                Manager::getInstance()->switchScence(scene);
                Manager::getInstance()->showMsg("进入单机模式，本地数据启动");
                
                this->setSeverItemsMouseEnable(true);
#endif
                break;
            }
            case CONNECTED:
            {
                Loading::getInstance()->hide();

                LoginReq pbLogin;
                pbLogin.set_account(sData["userBean"]["name"].GetString());
                pbLogin.set_key(sData["key"].GetString());
                pbLogin.set_areaid(sData["areaList"][2]["id"].GetInt());
                Manager::getInstance()->socket->send(C_LOGIN, &pbLogin);
                break;
            }
            case C_LOGIN:
            {
                 Manager::getInstance()->switchScence(HomeScene::createScene());
                break;
            }
            default:
                break;
        }
    });
    Director::getInstance()->getEventDispatcher()->addEventListenerWithSceneGraphPriority(listener, this);
    
}
void LoginScene::onExit()
{
    BaseUI::onExit();
}

