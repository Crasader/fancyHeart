//
//  Fighter.cpp
//  fancyHeart
//
//  Created by 秦亮亮 on 14-5-6.
//
//

#include "Fighter.h"
#include "FightScene.h"


Fighter* Fighter::create(std::string fPath,std::string rPath,int pos)
{
    Fighter* pRet = new Fighter();
    if (pRet && pRet->init(fPath,rPath,pos))
    {
        pRet->autorelease();
        return pRet;
    }
    else
    {
        delete pRet;
        pRet = NULL;
        return NULL;
    }
}

bool Fighter::init(std::string fPath,std::string rPath,int pos)
{
//    this->setAnchorPoint(Vec2(0.5,0.5));
    this->pos=pos;
	//init ui
    Size winSize=Director::getInstance()->getWinSize();

    this->cEventDispatcher=new EventDispatcher();
    this->cEventDispatcher->setEnabled(true);
    ArmatureDataManager::getInstance()->addArmatureFileInfo(rPath+".png", rPath+".plist", fPath+".ExportJson");
    this->armature=Armature::create("bodydaobing2"); //HeroAnimation
    this->armature->getAnimation()->setMovementEventCallFunc(CC_CALLBACK_0(Fighter::animationEvent, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));

    
    if(this->pos>4)
    {
        this->armature->setScale(0.6, 0.6);
        Size size=this->armature->getContentSize();
        this->armature->setPosition(Vec2(size.width*0.6/2,0));
    }else{
        this->armature->setScale(-0.6,0.6);
    }
    this->addChild(armature);
    
    Label* label=Label::createWithTTF(Value(pos).asString(), "Marker Felt.ttf", 32);
    this->addChild(label);
    label->setPosition(armature->getPosition());
    label->setColor(Color3B(255,100,100));
	return true;
}

void Fighter::onEnter()
{
    Node::onEnter();
    this->stand();
}

void Fighter::stand()
{
    this->armature->getAnimation()->play("loading",6);
}

void Fighter::run()
{
    /*
    CallFunc* cf=CallFunc::create(CC_CALLBACK_0(Fighter::runEnd, this));
    Vec2 vec(pos>4?-40:40.0,0);
    Sequence* sq=Sequence::create(MoveBy::create(0.25, vec),cf, NULL);
    this->stopAllActions();
    this->runAction(sq);
    */
    Vec2 vec(pos>4?-960:960,0);
    MoveBy* move=MoveBy::create(5, vec);
    move->setTag(RUN_ACTION_TAG);
    this->runAction(move);
    std::string mName=this->armature->getAnimation()->getCurrentMovementID();
    if(mName!="loading"){
        this->armature->getAnimation()->play("loading",-1,0);
    }
}

void Fighter::runEnd()
{
    this->delegate->startAttack(0);
}

void Fighter::attack()
{
    std::string mName=this->armature->getAnimation()->getCurrentMovementID();
    if(mName!="attack"){
        this->armature->getAnimation()->play("attack",-1,0);
    }
}

void Fighter::attacked(PHit& pHit)
{
    std::string mName=this->armature->getAnimation()->getCurrentMovementID();
    if(mName!="smitten1"){
        this->armature->getAnimation()->play("smitten1",-1,0);
    }
    this->fallHp(Value(pHit.hp()));
}

void Fighter::spell()
{
    std::string mName=this->armature->getAnimation()->getCurrentMovementID();
    if(mName!="sprint2"){
        this->armature->getAnimation()->play("sprint2",-1,0);
    }
}

void Fighter::fallHp(Value num)
{
    std::string fileName=num.asInt()>0?"shuzi4.png":"shuzi3.png";
    Label* label=Label::createWithCharMap(fileName, 30, 50, '1');
    label->setString(num.asString());
    label->setScale(0.3);
    this->addChild(label);
    int dir=pos>4?1:-1;
    label->setPosition(Vec2(armature->getContentSize().width/3*dir,this->armature->getContentSize().height*2/3));
    
    Spawn* spawn1=Spawn::create(MoveBy::create(0.2,Vec2(0,20)),ScaleTo::create(0.2, 0.7), NULL);
    Spawn* spawn2=Spawn::create(MoveBy::create(0.3,Vec2(0,40)),FadeOut::create(0.3), NULL);
    
    label->runAction(CCSequence::create(spawn1,spawn2,DelayTime::create(0.4),
                                        CallFunc::create(CC_CALLBACK_0(Label::removeFromParent, label)), NULL));
    
//    this->hitWord();
}

void Fighter::hitWord()
{
    Sprite* word=Sprite::create("hit.jpg");
    this->addChild(word);
    word->setScale(0.2);
    word->setPosition(Vec2(30,this->armature->boundingBox().size.height));
    MoveBy* move=MoveBy::create(0.3, Vec2(0, 100));
    Sequence* sq=Sequence::create(Spawn::create(EaseOut::create(move,2),EaseOut::create(ScaleTo::create(0.3, 0.8),2), NULL),DelayTime::create(0.2),FadeTo::create(0.2, 0),
                                  CallFunc::create(CC_CALLBACK_0(Sprite::removeFromParent, word)),NULL);
    word->runAction(sq);
}

void Fighter::die()
{
    std::string mName=this->armature->getAnimation()->getCurrentMovementID();
    if(mName!="smitten"){
        this->armature->getAnimation()->play("smitten");
    }
}

void Fighter::revive()
{
    this->stopActionByTag(HERO_DIE_TAG);
}

// 直线弹道
void Fighter::lineThrow()
{
    
}

//弧线弹道,被塞尔曲线计算
void Fighter::arcThrow()
{
    
}

//穿刺弹道，快速穿透
void Fighter::impaleThrow()
{
    
}

void Fighter::animationEvent(Armature *armature, MovementEventType movementType, const std::string& movementID)
{
    if(movementType==COMPLETE){
        this->stand();
        if(movementID=="smitten1"){
            this->delegate->attackOver();
        }
    }
}


void Fighter::onExit()
{
    Node::onExit();
}