package com.doteyplay.game.service.bo.virtualworld;

import org.apache.log4j.Logger;
import org.apache.mina.core.buffer.IoBuffer;

import com.doteyplay.core.bhns.AbstractSimpleService;
import com.doteyplay.core.bhns.BOServiceManager;
import com.doteyplay.core.bhns.active.ActiveServiceHolder;
import com.doteyplay.core.bhns.gateway.IGateWayService;
import com.doteyplay.core.dbcs.DBCS;
import com.doteyplay.game.config.ServerConfig;
import com.doteyplay.game.constants.IdType;
import com.doteyplay.game.domain.common.IdGenerator;
import com.doteyplay.game.domain.gamebean.RoleBean;
import com.doteyplay.game.domain.gamebean.UserBean;
import com.doteyplay.game.domain.role.Role;
import com.doteyplay.game.domain.user.User;
import com.doteyplay.game.message.login.LoginGameMessage;
import com.doteyplay.game.persistence.serverdata.role.IRoleBeanDao;
import com.doteyplay.game.persistence.serverdata.user.IUserBeanDao;
import com.doteyplay.game.service.bo.gateway.IGameGateWayService;
import com.doteyplay.game.service.runtimecache.GlobalRoleCache;
import com.doteyplay.game.service.runtimecache.GlobalUserCache;

public class VirtualWorldService extends
		AbstractSimpleService<IVirtualWorldService> implements
		IVirtualWorldService
{

	private static final Logger logger = Logger
			.getLogger(VirtualWorldService.class);

	@Override
	public int getPortalId()
	{
		return IVirtualWorldService.PORTAL_ID;
	}

	@Override
	public void initialize()
	{
	}

	@Override
	public void doLogin(long sessionId, String account, String password)
	{
		LoginGameMessage message = new LoginGameMessage();

		if (account == null || password == null)
		{
			message.setRespStatus(false);
			IGateWayService gateWayService = BOServiceManager
					.findDefaultService(IGateWayService.PORTAL_ID,
							getGatewayEndpointBySessionId(sessionId));
			IoBuffer buffer = message.encodeIoBuffer();
			int byteLength = buffer.limit();
			byte[] tmpMessageBytes = new byte[byteLength];
			buffer.get(tmpMessageBytes, 0, byteLength);
			gateWayService.sendMessage(tmpMessageBytes, sessionId);
			return;
		}

		IUserBeanDao userDao = DBCS.getExector(IUserBeanDao.class);
		UserBean userBean = userDao.selectUserBeanByName(account);
		boolean isNew = false;

		if (userBean == null)
		{
			userBean = new UserBean();
			userBean.setName(account);
			userBean.setPassword(password);
			userBean.setId(IdGenerator.getInstance().getId(IdType.USER_ID,
					ServerConfig.SERVER_AREA_ID));
			userBean.setAreaId(ServerConfig.SERVER_AREA_ID);
			userDao.insertUserBean(userBean);

			isNew = true;
		}

		User old = GlobalUserCache.getInstance().getUserById(userBean.getId());
		if (old != null)
			this.doLogout(old);

		User user = new User();
		user.setUserBean(userBean);
		GlobalUserCache.getInstance().putUserMap(user.getId(), user);

		Role role = roleLogin(user, isNew);
		if (role == null)
		{
			// role login exception
			return;
		}

		message.setRespStatus(true);
		message.setRespUserId(role.getId());
		message.setRespName(role.getName());

		ActiveServiceHolder.activeAllService(role.getId());

		IGameGateWayService gateWayService = BOServiceManager.activeService(
				IGameGateWayService.PORTAL_ID, role.getId(),
				getGatewayEndpointBySessionId(sessionId), false);

		gateWayService.loginNotify(role.getId(), sessionId);

		this.sendMessage(role.getId(), message);
	}

	private Role roleLogin(User user, boolean isNew)
	{
		IRoleBeanDao roleBeanDao = DBCS.getExector(IRoleBeanDao.class);
		RoleBean roleBean = null;
		if (isNew)
		{
			roleBean = new RoleBean();
			long roleId = IdGenerator.getInstance().getId(IdType.ROLE_ID,
					ServerConfig.SERVER_AREA_ID);
			roleBean.setAreaId(ServerConfig.SERVER_AREA_ID);
			roleBean.setId(roleId);
			roleBean.setName(user.getUserBean().getName());
			roleBean.setSpriteId(1);
			roleBean.setUserId(user.getId());
			roleBeanDao.insertRoleBean(roleBean);
		} else
		{
			roleBean = roleBeanDao.selectRoleBeanByUserId(user.getId());
		}
		
		if (roleBean != null)
		{
			Role role = new Role(roleBean, user);
			GlobalRoleCache.getInstance().putRoleMap(role.getId(), role);
			return role;
		}

		return null;
	}

	@Override
	public void doLogout(long roleId)
	{
		logger.debug("roleId:" + roleId + "登出游戏");
		Role role = GlobalRoleCache.getInstance().removeRoleById(roleId);
		if (role == null)
			logger.debug("roleId:" + roleId + "登出游戏失败");
		else
			GlobalUserCache.getInstance()
					.removeUserById(role.getUser().getId());

		BOServiceManager.destroyService(IGateWayService.PORTAL_ID, roleId);
		BOServiceManager.destroyService(IVirtualWorldService.PORTAL_ID, roleId);
	}

	public void doLogout(User user)
	{
		if (user != null && user.getRole() != null)
			this.doLogout(user.getRole().getId());
		else
			GlobalUserCache.getInstance().removeUserById(user.getId());
	}

}
