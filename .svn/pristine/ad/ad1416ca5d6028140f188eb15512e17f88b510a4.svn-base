#include "LoginScene.h"
#include "external/json/document.h"
#include "extensions/cocos-ext.h"
#include "ui/CocosGUI.h"
#include "cocostudio/CocoStudio.h"
#include "ShaderNode.h"


Scene* LoginScene::createScene()
{
    auto scene = Scene::create();
    auto layer = LoginScene::create();
    scene->addChild(layer);
    return scene;
}

LoginScene* LoginScene::create()
{
    LoginScene* loginScene=new LoginScene();
//    if (loginScene && loginScene->init("login.json")) {
    if (loginScene && loginScene->init("publish/login/login.ExportJson")) {
        loginScene->autorelease();
        return loginScene;
    }
    CC_SAFE_DELETE(loginScene);
    return nullptr;
}

bool LoginScene::init(std::string fileName)
{
    if(!BaseUI::init(fileName))
    {
        return false;
    }
    Size sSize=Director::getInstance()->getOpenGLView()->getFrameSize();
    Size winsize=Director::getInstance()->getWinSize();
    return true;
}

void LoginScene::onEnter()
{
    BaseUI::onEnter();
    
    this->initGame();
}

//init 游戏服务器 服务器认证
void LoginScene::initGame()
{
    DeviceInfo d;
    log("uuid:%s",d.getUUID());
    std::string str="account="+Value(d.getUUID()).asString()+"&password="+d.getUUID();
    WebHttp::getInstance()->send(HTTP_URL, CC_CALLBACK_1(LoginScene::initGameCallback, this),str.c_str());
}

void LoginScene::initGameCallback(std::vector<char> *data)
{
    std::string str(data->begin(),data->end());
    sData.Parse<0>(str.c_str());
    log(str.c_str());
    if (sData["loginState"].GetInt()!=0) {//先用以后修改
        log("登录认证失败！");
    }else if(sData["areaList"].Size()<1){
        log("服务列表数据长度不够");
    }else{
        ScrollView*scrollView=static_cast<ui::ScrollView*>(layout->getChildByName("scrollView"));
        Widget*lgintBtn=scrollView->getChildByName("loginBtn");
        for (int i = 0;i<sData["areaList"].Size();i++)//根据服务器给的数据添加多少个服选项
        {
            Widget* newItem = lgintBtn->clone();
            newItem->setTag(i);
            scrollView->addChild(newItem);
            newItem->setPosition(Vec2(i%2*200+150,i/2*150+135));
            newItem->addTouchEventListener(CC_CALLBACK_2(LoginScene::touchEvent,this));
        }
        lgintBtn->removeFromParent();//移除舞台上的单个按钮
    }
    
}

void LoginScene::onDlgClose(rapidjson::Value &data)
{
    BaseUI::onDlgClose(data);
    std::string btnName=data.GetString();
    log("you click confirm %s",btnName.c_str());
}

void LoginScene::touchEvent(Ref *pSender, Widget::TouchEventType type)
{
    auto button=static_cast<Button*>(pSender);
    switch (type)
    {
        case TouchEventType::BEGAN:
            break;
        case TouchEventType::MOVED:
            break;
        case TouchEventType::ENDED:
        {
            log("tag:%d",button->getTag());
            Manager::getInstance()->socket=new Socket();
            string ip=this->sData["areaList"][button->getTag()]["ip"].GetString();
            int port=this->sData["areaList"][button->getTag()]["port"].GetInt();
            Manager::getInstance()->socket->init(ip, port);
            break;
        }
        case TouchEventType::CANCELED:
            break;
        default:
            break;
    }
}

void LoginScene::initNetEvent(){
    auto listener = EventListenerCustom::create(NET_MESSAGE, [=](EventCustom* event){
        NetMsg* msg = static_cast<NetMsg*>(event->getUserData());
//        log("Custom event 1 received:%d,%d",msg->msgId,msg->len);
        switch (msg->msgId)
        {
            case CONNECT_ERROR:
            {
                
#if COCOS2D_DEBUG
                Manager::getInstance()->switchScence(HomeScene::createScene());
                Manager::getInstance()->showMsg("进入单机模式，本地数据启动");

#endif
                break;
            }
            case CONNECTED:
            {
                LoginReq pbLogin;
                pbLogin.set_account(sData["userBean"]["name"].GetString());
                pbLogin.set_key(sData["key"].GetString());
                pbLogin.set_areaid(sData["areaList"][2]["id"].GetInt());
                Manager::getInstance()->socket->send(C_LOGIN, &pbLogin);
                break;
            }
            case C_LOGIN:
            {
                 Manager::getInstance()->switchScence(HomeScene::createScene());
                break;
            }
            default:
                break;
        }
    });
    Director::getInstance()->getEventDispatcher()->addEventListenerWithSceneGraphPriority(listener, this);
    
}
void LoginScene::onExit()
{
    BaseUI::onExit();
}

