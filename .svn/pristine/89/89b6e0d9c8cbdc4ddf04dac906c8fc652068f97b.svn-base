//
//  Confirm.cpp
//  fancyHeart
//
//  Created by zhai on 14-6-18.
//
//

#include "Confirm.h"

Confirm::Confirm()
{

}

Confirm::~Confirm()
{

}
Confirm* Confirm::create(BaseUI* delegate)
{
    Confirm* confirm=new Confirm();
    if (confirm && confirm->init("dlg.json")) {
        confirm->autorelease();
        return confirm;
    }
    CC_SAFE_DELETE(confirm);
    return nullptr;
}

bool Confirm::init(std::string fileName)
{
	if(!BaseUI::init(fileName))
	{
		return false;
	}
	//init ui
    

	return true;
}



void Confirm::show(bool isModel,bool isAnchor, int effectType)
{
     if(this->getParent()==nullptr){
        Manager::getInstance()->scene->addChild(this);
    }
    if(isAnchor){
        //Manager::getInstance()->dlgVec.pushBack(this);
    }
}

void Confirm::clear(bool isDel)
{
    if(isDel){
        this->removeFromParent();
    }
}

void Confirm::touchEvent(Ref *pSender, TouchEventType type)
{
    switch (type)
    {
        case TouchEventType::BEGAN:
            break;
        case TouchEventType::MOVED:
            break;
        case TouchEventType::ENDED:
        {
            rapidjson::Value value;
            this->delegate->onDlgClose(value);
        }
            
            break;
        case TouchEventType::CANCELED:
            break;
        default:
            break;
    }
}

void Confirm::initNetEvent(){
    auto listener = EventListenerCustom::create(NET_MESSAGE, [=](EventCustom* event){
        NetMsg* msg = static_cast<NetMsg*>(event->getUserData());
        switch (msg->msgId)
        {
            case C_LOGIN:
            {
                //PackageLoginResp* pm=new PackageLoginResp();
                //pm->ParseFromArray(msg->bytes, msg->len);
                //log("====reciveMsg:%d,%d,%s",pm->status(),pm->id(),pm->name().c_str());
            }
                break;
            default:
                break;
        }
    });
    Director::getInstance()->getEventDispatcher()->addEventListenerWithFixedPriority(listener,1);
}