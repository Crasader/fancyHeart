//
//  SkillIcon.cpp
//  fancyHeart
//
//  Created by 秦亮亮 on 14-9-24.
//
//

#include "SkillIcon.h"

SkillIcon* SkillIcon::create(ImageView* rim,Vec2 position,int skillID,FighterMgr* hero)
{
    SkillIcon* pRet=new SkillIcon();
    if(pRet && pRet->init(rim,position,skillID,hero)){
        pRet->autorelease();
        return pRet;
    }
    pRet->autorelease();
    return nullptr;
}

bool SkillIcon::init(ImageView* rim,Vec2 position,int skillID,FighterMgr* hero)
{
    this->rim=rim;
    this->skillID=skillID;
    this->skill=Skill::create(skillID);
    this->skill->retain();
    this->hero=hero;
    std::string fName="face_"+Value(hero->mf->data->bd.xid).asString()+".png";
    ImageView* img=ImageView::create(fName);
    Vec2 pos=rim->getPosition();
    img->setPosition(pos);
    this->addChild(img);
    
    this->addChild(rim);
    rim->setVisible(false);
    
//    this->progressBar=ProgressTimer::create(Sprite::create("combat_below_a2.png"));
//    this->progressBar=ProgressTimer::create(Sprite::createWithSpriteFrameName("fight/combat_skill.png"));
//    
//    this->addChild(progressBar);
//    this->progressBar->setPosition(pos);
//    this->progressBar->setPosition(position-Vec2(0,2));
//    this->progressBar->setType(ProgressTimer::Type::RADIAL);
    //this->progressBar->setMidpoint(Vec2(0,0));
    //this->progressBar->setBarChangeRate(Vec2(1, 0));

    //this->progressBar->setPercentage(0.0);
  
    this->start();
    return true;
}

void SkillIcon::start()
{
//    this->progressBar->setPercentage(0.0);
    this->rim->stopAllActions();
    this->rim->setVisible(false);
    this->skill->isReady=false;
    this->isOK=false;
    
    this->skill->isReady=true;

    
//    XSkill* xskill=XSkill::record(Value(skillID));
//    ProgressTo* pt=ProgressTo::create(xskill->getTriggerParam()/10000.0 *6, 100.0);
//    this->progressBar->runAction(Sequence::create(pt,CallFunc::create(CC_CALLBACK_0(SkillIcon::skillReady, this)), NULL));
}

void SkillIcon::skillReady()
{
    this->skill->isReady=true;
    this->isOK=true;
    //this->rim->setVisible(true);
    //this->rim->runAction(RepeatForever::create(Sequence::create(FadeTo::create(0.8,60),FadeTo::create(0.8,255), NULL)));
}
