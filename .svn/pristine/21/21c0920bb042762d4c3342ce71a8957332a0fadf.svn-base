// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PGateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PGateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PNodeItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PNodeItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PGateItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PGateItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PGateResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PGateResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gate_2eproto() {
  protobuf_AddDesc_gate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gate.proto");
  GOOGLE_CHECK(file != NULL);
  PGateReq_descriptor_ = file->message_type(0);
  static const int PGateReq_offsets_[1] = {
  };
  PGateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PGateReq_descriptor_,
      PGateReq::default_instance_,
      PGateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PGateReq));
  PNodeItem_descriptor_ = file->message_type(1);
  static const int PNodeItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNodeItem, xid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNodeItem, star_),
  };
  PNodeItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PNodeItem_descriptor_,
      PNodeItem::default_instance_,
      PNodeItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNodeItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNodeItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PNodeItem));
  PGateItem_descriptor_ = file->message_type(2);
  static const int PGateItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGateItem, islock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGateItem, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGateItem, items_),
  };
  PGateItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PGateItem_descriptor_,
      PGateItem::default_instance_,
      PGateItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGateItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGateItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PGateItem));
  PGateResp_descriptor_ = file->message_type(3);
  static const int PGateResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGateResp, gates_),
  };
  PGateResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PGateResp_descriptor_,
      PGateResp::default_instance_,
      PGateResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGateResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGateResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PGateResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PGateReq_descriptor_, &PGateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PNodeItem_descriptor_, &PNodeItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PGateItem_descriptor_, &PGateItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PGateResp_descriptor_, &PGateResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gate_2eproto() {
  delete PGateReq::default_instance_;
  delete PGateReq_reflection_;
  delete PNodeItem::default_instance_;
  delete PNodeItem_reflection_;
  delete PGateItem::default_instance_;
  delete PGateItem_reflection_;
  delete PGateResp::default_instance_;
  delete PGateResp_reflection_;
}

void protobuf_AddDesc_gate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ngate.proto\"\n\n\010PGateReq\"&\n\tPNodeItem\022\013\n"
    "\003xID\030\002 \002(\005\022\014\n\004star\030\001 \002(\005\"F\n\tPGateItem\022\016\n"
    "\006isLock\030\001 \002(\010\022\016\n\006gateID\030\002 \002(\005\022\031\n\005items\030\003"
    " \003(\0132\n.PNodeItem\"&\n\tPGateResp\022\031\n\005gates\030\001"
    " \003(\0132\n.PGateItemB.\n com.doteyplay.game.m"
    "essage.protoB\nGateProBuf", 224);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gate.proto", &protobuf_RegisterTypes);
  PGateReq::default_instance_ = new PGateReq();
  PNodeItem::default_instance_ = new PNodeItem();
  PGateItem::default_instance_ = new PGateItem();
  PGateResp::default_instance_ = new PGateResp();
  PGateReq::default_instance_->InitAsDefaultInstance();
  PNodeItem::default_instance_->InitAsDefaultInstance();
  PGateItem::default_instance_->InitAsDefaultInstance();
  PGateResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gate_2eproto {
  StaticDescriptorInitializer_gate_2eproto() {
    protobuf_AddDesc_gate_2eproto();
  }
} static_descriptor_initializer_gate_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PGateReq::PGateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PGateReq::InitAsDefaultInstance() {
}

PGateReq::PGateReq(const PGateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PGateReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PGateReq::~PGateReq() {
  SharedDtor();
}

void PGateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PGateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PGateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PGateReq_descriptor_;
}

const PGateReq& PGateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

PGateReq* PGateReq::default_instance_ = NULL;

PGateReq* PGateReq::New() const {
  return new PGateReq;
}

void PGateReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PGateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PGateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PGateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PGateReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PGateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PGateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PGateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PGateReq::MergeFrom(const PGateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PGateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PGateReq::CopyFrom(const PGateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PGateReq::IsInitialized() const {

  return true;
}

void PGateReq::Swap(PGateReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PGateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PGateReq_descriptor_;
  metadata.reflection = PGateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PNodeItem::kXIDFieldNumber;
const int PNodeItem::kStarFieldNumber;
#endif  // !_MSC_VER

PNodeItem::PNodeItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PNodeItem::InitAsDefaultInstance() {
}

PNodeItem::PNodeItem(const PNodeItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PNodeItem::SharedCtor() {
  _cached_size_ = 0;
  xid_ = 0;
  star_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PNodeItem::~PNodeItem() {
  SharedDtor();
}

void PNodeItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PNodeItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PNodeItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PNodeItem_descriptor_;
}

const PNodeItem& PNodeItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

PNodeItem* PNodeItem::default_instance_ = NULL;

PNodeItem* PNodeItem::New() const {
  return new PNodeItem;
}

void PNodeItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    xid_ = 0;
    star_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PNodeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 star = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_xID;
        break;
      }

      // required int32 xID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xid_)));
          set_has_xid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PNodeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 star = 1;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->star(), output);
  }

  // required int32 xID = 2;
  if (has_xid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->xid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PNodeItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 star = 1;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->star(), target);
  }

  // required int32 xID = 2;
  if (has_xid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->xid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PNodeItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 xID = 2;
    if (has_xid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xid());
    }

    // required int32 star = 1;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PNodeItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PNodeItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PNodeItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PNodeItem::MergeFrom(const PNodeItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xid()) {
      set_xid(from.xid());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PNodeItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PNodeItem::CopyFrom(const PNodeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PNodeItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PNodeItem::Swap(PNodeItem* other) {
  if (other != this) {
    std::swap(xid_, other->xid_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PNodeItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PNodeItem_descriptor_;
  metadata.reflection = PNodeItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PGateItem::kIsLockFieldNumber;
const int PGateItem::kGateIDFieldNumber;
const int PGateItem::kItemsFieldNumber;
#endif  // !_MSC_VER

PGateItem::PGateItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PGateItem::InitAsDefaultInstance() {
}

PGateItem::PGateItem(const PGateItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PGateItem::SharedCtor() {
  _cached_size_ = 0;
  islock_ = false;
  gateid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PGateItem::~PGateItem() {
  SharedDtor();
}

void PGateItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PGateItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PGateItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PGateItem_descriptor_;
}

const PGateItem& PGateItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

PGateItem* PGateItem::default_instance_ = NULL;

PGateItem* PGateItem::New() const {
  return new PGateItem;
}

void PGateItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    islock_ = false;
    gateid_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PGateItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isLock = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islock_)));
          set_has_islock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gateID;
        break;
      }

      // required int32 gateID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .PNodeItem items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PGateItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isLock = 1;
  if (has_islock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->islock(), output);
  }

  // required int32 gateID = 2;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gateid(), output);
  }

  // repeated .PNodeItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PGateItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isLock = 1;
  if (has_islock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->islock(), target);
  }

  // required int32 gateID = 2;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gateid(), target);
  }

  // repeated .PNodeItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PGateItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isLock = 1;
    if (has_islock()) {
      total_size += 1 + 1;
    }

    // required int32 gateID = 2;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateid());
    }

  }
  // repeated .PNodeItem items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PGateItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PGateItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PGateItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PGateItem::MergeFrom(const PGateItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_islock()) {
      set_islock(from.islock());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PGateItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PGateItem::CopyFrom(const PGateItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PGateItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void PGateItem::Swap(PGateItem* other) {
  if (other != this) {
    std::swap(islock_, other->islock_);
    std::swap(gateid_, other->gateid_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PGateItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PGateItem_descriptor_;
  metadata.reflection = PGateItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PGateResp::kGatesFieldNumber;
#endif  // !_MSC_VER

PGateResp::PGateResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PGateResp::InitAsDefaultInstance() {
}

PGateResp::PGateResp(const PGateResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PGateResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PGateResp::~PGateResp() {
  SharedDtor();
}

void PGateResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PGateResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PGateResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PGateResp_descriptor_;
}

const PGateResp& PGateResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

PGateResp* PGateResp::default_instance_ = NULL;

PGateResp* PGateResp::New() const {
  return new PGateResp;
}

void PGateResp::Clear() {
  gates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PGateResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PGateItem gates = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_gates;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PGateResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PGateItem gates = 1;
  for (int i = 0; i < this->gates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PGateResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PGateItem gates = 1;
  for (int i = 0; i < this->gates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PGateResp::ByteSize() const {
  int total_size = 0;

  // repeated .PGateItem gates = 1;
  total_size += 1 * this->gates_size();
  for (int i = 0; i < this->gates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PGateResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PGateResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PGateResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PGateResp::MergeFrom(const PGateResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  gates_.MergeFrom(from.gates_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PGateResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PGateResp::CopyFrom(const PGateResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PGateResp::IsInitialized() const {

  for (int i = 0; i < gates_size(); i++) {
    if (!this->gates(i).IsInitialized()) return false;
  }
  return true;
}

void PGateResp::Swap(PGateResp* other) {
  if (other != this) {
    gates_.Swap(&other->gates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PGateResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PGateResp_descriptor_;
  metadata.reflection = PGateResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
